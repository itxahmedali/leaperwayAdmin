{"version":3,"sources":["../../../src/plugins/placeholder.ts","../../../src/plugins/editable.ts","../../../src/plugins/image.ts"],"names":["placeholderPlugin","text","Plugin","key","PluginKey","state","init","apply","tr","previousVal","_a","getMeta","props","decorations","doc","placeholder","this","getState","DecorationSet","empty","childCount","firstChild","isTextblock","content","size","placeHolderEl","document","createElement","classList","add","textContent","create","Decoration","widget","editablePlugin","editable","attributes","class","WRAPPER_RESIZE_ACTIVE_CLASSNAME","RESIZE_HANDLE_CLASSNAME","createHandle","direction","handle","className","ImageRezieView","node","view","getPos","outer","style","width","attrs","img","setAttribute","src","alt","_b","title","handleBottomRight","handleTopRight","handleTopLeft","handleBottomLeft","resizePropoptionally","evt","preventDefault","dispatch","startX","pageX","startWidth","clientWidth","window","getComputedStyle","dom","editorWidth","parseInt","onMouseMove","e","currentX","computedWidth","onMouseUp","removeEventListener","transaction","setNodeMarkup","resolvedPos","resolve","newSelection","NodeSelection","setSelection","addEventListener","once","appendChild","prototype","selectNode","display","deselectNode","remove","defaultOptions","resize","imagePlugin","opts","options","Object","assign","nodeViews","image"],"mappings":"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","sourcesContent":["import { Plugin, EditorState, PluginKey, Transaction } from 'prosemirror-state';\nimport { DecorationSet, Decoration } from 'prosemirror-view';\n\nconst DEFAULT_PLACEHOLDER = 'Type Here...';\nconst PLACEHOLDER_CLASSNAME = 'NgxEditor__Placeholder';\n\nconst placeholderPlugin = (text: string = DEFAULT_PLACEHOLDER): Plugin => {\n  return new Plugin({\n    key: new PluginKey('placeholder'),\n    state: {\n      init(): string {\n        return text;\n      },\n      apply(tr: Transaction, previousVal: string): string {\n        const placeholder = tr.getMeta('UPDATE_PLACEHOLDER') ?? previousVal;\n        return placeholder;\n      }\n    },\n    props: {\n      decorations(state: EditorState): DecorationSet {\n        const doc = state.doc;\n\n        const placeholder = this.getState(state);\n\n        if (!placeholder) {\n          return DecorationSet.empty;\n        }\n\n        if (doc.childCount === 1 && doc?.firstChild?.isTextblock && doc.firstChild.content.size === 0) {\n          const placeHolderEl = document.createElement('span');\n          placeHolderEl.classList.add(PLACEHOLDER_CLASSNAME);\n          placeHolderEl.textContent = placeholder;\n          return DecorationSet.create(doc, [Decoration.widget(1, placeHolderEl)]);\n        }\n\n        return DecorationSet.empty;\n      }\n    }\n  });\n};\n\nexport default placeholderPlugin;\n","import { EditorState, Plugin, PluginKey, Transaction } from 'prosemirror-state';\n\nconst editablePlugin = (editable = true) => {\n  return new Plugin({\n    key: new PluginKey('editable'),\n    state: {\n      init(): boolean {\n        return editable;\n      },\n      apply(tr: Transaction, previousVal: boolean): string {\n        return tr.getMeta('UPDATE_EDITABLE') ?? previousVal;\n      }\n    },\n    props: {\n      editable(state: EditorState): boolean {\n        return this.getState(state);\n      },\n      attributes(state: EditorState): Record<string, string> | null {\n        const isEnabled = this.getState(state);\n\n        if (isEnabled) {\n          return null;\n        }\n\n        return {\n          class: 'NgxEditor__Content--Disabled'\n        };\n      }\n    }\n  });\n};\n\nexport default editablePlugin;\n","import { Node as ProsemirrorNode } from 'prosemirror-model';\nimport { NodeSelection, Plugin, PluginKey } from 'prosemirror-state';\nimport { EditorView } from 'prosemirror-view';\n\nconst WRAPPER_CLASSNAME = 'NgxEditor__ImageWrapper';\nconst WRAPPER_RESIZE_ACTIVE_CLASSNAME = 'NgxEditor__Resizer--Active';\nconst RESIZE_HANDLE_CLASSNAME = 'NgxEditor__ResizeHandle';\n\nconst createHandle = (direction: string): HTMLElement => {\n  const handle = document.createElement('span');\n  handle.className = `${RESIZE_HANDLE_CLASSNAME}--${direction}`;\n  return handle;\n};\n\nclass ImageRezieView {\n  img: HTMLElement;\n  dom: HTMLElement;\n  handle: HTMLElement;\n\n  constructor(node: ProsemirrorNode, view: EditorView, getPos: () => number) {\n    const outer = document.createElement('span');\n    outer.className = WRAPPER_CLASSNAME;\n    outer.style.width = node.attrs.width;\n\n    const handle = document.createElement('span');\n    handle.className = RESIZE_HANDLE_CLASSNAME;\n\n    const img = document.createElement('img');\n    img.setAttribute('src', node.attrs.src);\n    img.setAttribute('alt', node.attrs.alt ?? '');\n    img.setAttribute('title', node.attrs.title ?? '');\n    img.style.width = '100%';\n\n    const handleBottomRight = createHandle('BR');\n    const handleTopRight = createHandle('TL');\n    const handleTopLeft = createHandle('TR');\n    const handleBottomLeft = createHandle('BL');\n\n    const resizePropoptionally = (evt: MouseEvent) => {\n      evt.preventDefault();\n\n      const { state, dispatch } = view;\n      const { tr } = state;\n\n      const startX = evt.pageX;\n      const startWidth = img.clientWidth;\n\n      const { width } = window.getComputedStyle(view.dom);\n      const editorWidth = parseInt(width, 10);\n\n      const onMouseMove = (e: MouseEvent) => {\n        const currentX = e.pageX;\n        const diffInPx = currentX - startX;\n        const computedWidth = startWidth + diffInPx;\n\n        // prevent image overflow the editor\n        // prevent resizng below 20px\n        if (computedWidth > editorWidth || computedWidth < 20) {\n          return;\n        }\n\n        outer.style.width = `${computedWidth}px`;\n      };\n\n      const onMouseUp = (e: MouseEvent) => {\n        e.preventDefault();\n\n        document.removeEventListener('mousemove', onMouseMove);\n        document.removeEventListener('mouseup', onMouseUp);\n\n        const transaction = tr.setNodeMarkup(getPos(), null, {\n          src: node.attrs.src,\n          width: outer.style.width\n        });\n\n        const resolvedPos = transaction.doc.resolve(getPos());\n        const newSelection = new NodeSelection(resolvedPos);\n\n        transaction.setSelection(newSelection);\n        dispatch(transaction);\n      };\n\n      document.addEventListener('mousemove', onMouseMove);\n      document.addEventListener('mouseup', onMouseUp);\n    };\n\n    handleBottomRight.addEventListener('mousedown', resizePropoptionally, { once: true });\n    handleTopRight.addEventListener('mousedown', resizePropoptionally, { once: true });\n    handleTopLeft.addEventListener('mousedown', resizePropoptionally, { once: true });\n    handleBottomLeft.addEventListener('mousedown', resizePropoptionally, { once: true });\n\n    handle.appendChild(handleBottomRight);\n    handle.appendChild(handleTopRight);\n    handle.appendChild(handleTopLeft);\n    handle.appendChild(handleBottomLeft);\n\n    outer.appendChild(handle);\n    outer.appendChild(img);\n\n    this.dom = outer;\n    this.img = img;\n    this.handle = handle;\n  }\n\n  selectNode(): void {\n    this.dom.classList.add(WRAPPER_RESIZE_ACTIVE_CLASSNAME);\n    this.handle.style.display = 'block';\n  }\n\n  deselectNode(): void {\n    this.dom.classList.remove(WRAPPER_RESIZE_ACTIVE_CLASSNAME);\n    this.handle.style.display = 'none';\n  }\n}\n\nconst defaultOptions = {\n  resize: true,\n};\n\nconst imagePlugin = (opts = defaultOptions): Plugin => {\n  const options = { ...defaultOptions, ...opts };\n\n  return new Plugin({\n    key: new PluginKey('link'),\n    props: {\n      nodeViews: {\n        image: (node: ProsemirrorNode, view: EditorView, getPos: () => number) => {\n          if (!options.resize) {\n            return null;\n          }\n          return new ImageRezieView(node, view, getPos);\n        },\n      }\n    }\n  });\n};\n\nexport default imagePlugin;\n"]}