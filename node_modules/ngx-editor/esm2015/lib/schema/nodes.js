import * as sl from 'prosemirror-schema-list';
import toStyleString from '../utils/toStyleString';
const doc = {
    content: 'block+'
};
// :: NodeSpec The text node.
const text = {
    group: 'inline'
};
// :: NodeSpec A plain paragraph textblock. Represented in the DOM
// as a `<p>` element.
const paragraph = {
    content: 'inline*',
    group: 'block',
    attrs: {
        align: {
            default: null,
        }
    },
    parseDOM: [
        {
            tag: 'p',
            getAttrs(dom) {
                const { textAlign } = dom.style;
                const align = dom.getAttribute('align') || textAlign || null;
                return {
                    align
                };
            }
        }
    ],
    toDOM(node) {
        const { align } = node.attrs;
        const styles = {
            textAlign: align !== 'left' ? align : null
        };
        const style = toStyleString(styles) || null;
        return ['p', { style }, 0];
    }
};
// :: NodeSpec A blockquote (`<blockquote>`) wrapping one or more blocks.
const blockquote = {
    content: 'block+',
    group: 'block',
    defining: true,
    parseDOM: [{ tag: 'blockquote' }],
    toDOM() {
        return ['blockquote', 0];
    }
};
// :: NodeSpec A horizontal rule (`<hr>`).
const horizontalRule = {
    group: 'block',
    parseDOM: [{ tag: 'hr' }],
    toDOM() {
        return ['hr'];
    }
};
// :: NodeSpec A heading textblock, with a `level` attribute that
// should hold the number 1 to 6. Parsed and serialized as `<h1>` to
// `<h6>` elements.
const heading = {
    attrs: {
        level: {
            default: 1
        },
        align: {
            default: null,
        }
    },
    content: 'inline*',
    group: 'block',
    defining: true,
    parseDOM: [
        {
            tag: 'h1',
            getAttrs(dom) {
                const { textAlign } = dom.style;
                const align = dom.getAttribute('align') || textAlign || null;
                return {
                    level: 1,
                    align
                };
            }
        },
        {
            tag: 'h2',
            getAttrs(dom) {
                const { textAlign } = dom.style;
                const align = dom.getAttribute('align') || textAlign || null;
                return {
                    level: 2,
                    align
                };
            }
        },
        {
            tag: 'h3',
            getAttrs(dom) {
                const { textAlign } = dom.style;
                const align = dom.getAttribute('align') || textAlign || null;
                return {
                    level: 3,
                    align
                };
            }
        },
        {
            tag: 'h4',
            getAttrs(dom) {
                const { textAlign } = dom.style;
                const align = dom.getAttribute('align') || textAlign || null;
                return {
                    level: 4,
                    align
                };
            }
        },
        {
            tag: 'h5',
            getAttrs(dom) {
                const { textAlign } = dom.style;
                const align = dom.getAttribute('align') || textAlign || null;
                return {
                    level: 5,
                    align
                };
            }
        },
        {
            tag: 'h6',
            getAttrs(dom) {
                const { textAlign } = dom.style;
                const align = dom.getAttribute('align') || textAlign || null;
                return {
                    level: 6,
                    align
                };
            }
        },
    ],
    toDOM(node) {
        const { level, align } = node.attrs;
        const styles = {
            textAlign: align !== 'left' ? align : null
        };
        const style = toStyleString(styles) || null;
        return ['h' + level, { style }, 0];
    }
};
// :: NodeSpec A code listing. Disallows marks or non-text inline
// nodes by default. Represented as a `<pre>` element with a
// `<code>` element inside of it.
const codeBlock = {
    content: 'text*',
    marks: '',
    group: 'block',
    code: true,
    defining: true,
    parseDOM: [
        {
            tag: 'pre',
            preserveWhitespace: 'full'
        }
    ],
    toDOM() {
        return ['pre', ['code', 0]];
    }
};
// :: NodeSpec A hard line break, represented in the DOM as `<br>`.
const hardBreak = {
    inline: true,
    group: 'inline',
    selectable: false,
    parseDOM: [{ tag: 'br' }],
    toDOM() {
        return ['br'];
    }
};
// :: NodeSpec An inline image (`<img>`) node. Supports `src`,
// `alt`, and `href` attributes. The latter two default to the empty
// string.
export const image = {
    inline: true,
    attrs: {
        src: {},
        alt: { default: null },
        title: { default: null },
        width: { default: null }
    },
    group: 'inline',
    draggable: true,
    parseDOM: [
        {
            tag: 'img[src]',
            getAttrs(dom) {
                return {
                    src: dom.getAttribute('src'),
                    title: dom.getAttribute('title'),
                    alt: dom.getAttribute('alt'),
                    width: dom.getAttribute('width')
                };
            }
        }
    ],
    toDOM(node) {
        const { src, alt, title, width } = node.attrs;
        return ['img', { src, alt, title, width }];
    }
};
const listItem = Object.assign(Object.assign({}, sl.listItem), { content: 'paragraph block*' });
const orderedList = Object.assign(Object.assign({}, sl.orderedList), { content: 'list_item+', group: 'block' });
const bulletList = Object.assign(Object.assign({}, sl.bulletList), { content: 'list_item+', group: 'block' });
const nodes = {
    doc,
    text,
    paragraph,
    blockquote,
    horizontal_rule: horizontalRule,
    heading,
    hard_break: hardBreak,
    code_block: codeBlock,
    image,
    list_item: listItem,
    ordered_list: orderedList,
    bullet_list: bulletList
};
export default nodes;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZXMuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4vc3JjLyIsInNvdXJjZXMiOlsibGliL3NjaGVtYS9ub2Rlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEtBQUssRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRTlDLE9BQU8sYUFBYSxNQUFNLHdCQUF3QixDQUFDO0FBRW5ELE1BQU0sR0FBRyxHQUFhO0lBQ3BCLE9BQU8sRUFBRSxRQUFRO0NBQ2xCLENBQUM7QUFFRiw2QkFBNkI7QUFDN0IsTUFBTSxJQUFJLEdBQWE7SUFDckIsS0FBSyxFQUFFLFFBQVE7Q0FDaEIsQ0FBQztBQUVGLGtFQUFrRTtBQUNsRSxzQkFBc0I7QUFDdEIsTUFBTSxTQUFTLEdBQWE7SUFDMUIsT0FBTyxFQUFFLFNBQVM7SUFDbEIsS0FBSyxFQUFFLE9BQU87SUFDZCxLQUFLLEVBQUU7UUFDTCxLQUFLLEVBQUU7WUFDTCxPQUFPLEVBQUUsSUFBSTtTQUNkO0tBQ0Y7SUFDRCxRQUFRLEVBQUU7UUFDUjtZQUNFLEdBQUcsRUFBRSxHQUFHO1lBQ1IsUUFBUSxDQUFDLEdBQWdCO2dCQUN2QixNQUFNLEVBQUUsU0FBUyxFQUFFLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQztnQkFDaEMsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsSUFBSSxTQUFTLElBQUksSUFBSSxDQUFDO2dCQUU3RCxPQUFPO29CQUNMLEtBQUs7aUJBQ04sQ0FBQztZQUNKLENBQUM7U0FDRjtLQUNGO0lBQ0QsS0FBSyxDQUFDLElBQUk7UUFDUixNQUFNLEVBQUUsS0FBSyxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUU3QixNQUFNLE1BQU0sR0FBaUM7WUFDM0MsU0FBUyxFQUFFLEtBQUssS0FBSyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSTtTQUMzQyxDQUFDO1FBQ0YsTUFBTSxLQUFLLEdBQUcsYUFBYSxDQUFD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Q0FBQyxPQUFPLENBQUM7aUJBQ2pDLENBQUM7WUFDSixDQUFDO1NBQ0Y7S0FDRjtJQUNELEtBQUssQ0FBQyxJQUFxQjtRQUN6QixNQUFNLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUM5QyxPQUFPLENBQUMsS0FBSyxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUM3QyxDQUFDO0NBQ0YsQ0FBQztBQUVGLE1BQU0sUUFBUSxtQ0FDVCxFQUFFLENBQUMsUUFBUSxLQUNkLE9BQU8sRUFBRSxrQkFBa0IsR0FDNUIsQ0FBQztBQUVGLE1BQU0sV0FBVyxtQ0FDWixFQUFFLENBQUMsV0FBVyxLQUNqQixPQUFPLEVBQUUsWUFBWSxFQUNyQixLQUFLLEVBQUUsT0FBTyxHQUNmLENBQUM7QUFFRixNQUFNLFVBQVUsbUNBQ1gsRUFBRSxDQUFDLFVBQVUsS0FDaEIsT0FBTyxFQUFFLFlBQVksRUFDckIsS0FBSyxFQUFFLE9BQU8sR0FDZixDQUFDO0FBRUYsTUFBTSxLQUFLLEdBQUc7SUFDWixHQUFHO0lBQ0gsSUFBSTtJQUNKLFNBQVM7SUFDVCxVQUFVO0lBQ1YsZUFBZSxFQUFFLGNBQWM7SUFDL0IsT0FBTztJQUNQLFVBQVUsRUFBRSxTQUFTO0lBQ3JCLFVBQVUsRUFBRSxTQUFTO0lBQ3JCLEtBQUs7SUFDTCxTQUFTLEVBQUUsUUFBUTtJQUNuQixZQUFZLEVBQUUsV0FBVztJQUN6QixXQUFXLEVBQUUsVUFBVTtDQUN4QixDQUFDO0FBRUYsZUFBZSxLQUFLLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBET01PdXRwdXRTcGVjLCBOb2RlIGFzIFByb3NlbWlycm9yTm9kZSwgTm9kZVNwZWMgfSBmcm9tICdwcm9zZW1pcnJvci1tb2RlbCc7XG5pbXBvcnQgKiBhcyBzbCBmcm9tICdwcm9zZW1pcnJvci1zY2hlbWEtbGlzdCc7XG5cbmltcG9ydCB0b1N0eWxlU3RyaW5nIGZyb20gJy4uL3V0aWxzL3RvU3R5bGVTdHJpbmcnO1xuXG5jb25zdCBkb2M6IE5vZGVTcGVjID0ge1xuICBjb250ZW50OiAnYmxvY2srJ1xufTtcblxuLy8gOjogTm9kZVNwZWMgVGhlIHRleHQgbm9kZS5cbmNvbnN0IHRleHQ6IE5vZGVTcGVjID0ge1xuICBncm91cDogJ2lubGluZSdcbn07XG5cbi8vIDo6IE5vZGVTcGVjIEEgcGxhaW4gcGFyYWdyYXBoIHRleHRibG9jay4gUmVwcmVzZW50ZWQgaW4gdGhlIERPTVxuLy8gYXMgYSBgPHA+YCBlbGVtZW50LlxuY29uc3QgcGFyYWdyYXBoOiBOb2RlU3BlYyA9IHtcbiAgY29udGVudDogJ2lubGluZSonLFxuICBncm91cDogJ2Jsb2NrJyxcbiAgYXR0cnM6IHtcbiAgICBhbGlnbjoge1xuICAgICAgZGVmYXVsdDogbnVsbCxcbiAgICB9XG4gIH0sXG4gIHBhcnNlRE9NOiBbXG4gICAge1xuICAgICAgdGFnOiAncCcsXG4gICAgICBnZXRBdHRycyhkb206IEhUTUxFbGVtZW50KTogUmVjb3JkPHN0cmluZywgYW55PiB7XG4gICAgICAgIGNvbnN0IHsgdGV4dEFsaWduIH0gPSBkb20uc3R5bGU7XG4gICAgICAgIGNvbnN0IGFsaWduID0gZG9tLmdldEF0dHJpYnV0ZSgnYWxpZ24nKSB8fCB0ZXh0QWxpZ24gfHwgbnVsbDtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGFsaWduXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuICBdLFxuICB0b0RPTShub2RlKTogRE9NT3V0cHV0U3BlYyB7XG4gICAgY29uc3QgeyBhbGlnbiB9ID0gbm9kZS5hdHRycztcblxuICAgIGNvbnN0IHN0eWxlczogUGFydGlhbDxDU1NTdHlsZURlY2xhcmF0aW9uPiA9IHtcbiAgICAgIHRleHRBbGlnbjogYWxpZ24gIT09ICdsZWZ0JyA/IGFsaWduIDogbnVsbFxuICAgIH07XG4gICAgY29uc3Qgc3R5bGUgPSB0b1N0eWxlU3RyaW5nKHN0eWxlcykgfHwgbnVsbDtcblxuICAgIHJldHVybiBbJ3AnLCB7IHN0eWxlIH0sIDBdO1xuICB9XG59O1xuXG4vLyA6OiBOb2RlU3BlYyBBIGJsb2NrcXVvdGUgKGA8YmxvY2txdW90ZT5gKSB3cmFwcGluZyBvbmUgb3IgbW9yZSBibG9ja3MuXG5jb25zdCBibG9ja3F1b3RlOiBOb2RlU3BlYyA9IHtcbiAgY29udGVudDogJ2Jsb2NrKycsXG4gIGdyb3VwOiAnYmxvY2snLFxuICBkZWZpbmluZzogdHJ1ZSxcbiAgcGFyc2VET006IFt7IHRhZzogJ2Jsb2NrcXVvdGUnIH1dLFxuICB0b0RPTSgpOiBET01PdXRwdXRTcGVjIHtcbiAgICByZXR1cm4gWydibG9ja3F1b3RlJywgMF07XG4gIH1cbn07XG5cbi8vIDo6IE5vZGVTcGVjIEEgaG9yaXpvbnRhbCBydWxlIChgPGhyPmApLlxuY29uc3QgaG9yaXpvbnRhbFJ1bGU6IE5vZGVTcGVjID0ge1xuICBncm91cDogJ2Jsb2NrJyxcbiAgcGFyc2VET006IFt7IHRhZzogJ2hyJyB9XSxcbiAgdG9ET00oKTogRE9NT3V0cHV0U3BlYyB7XG4gICAgcmV0dXJuIFsnaHInXTtcbiAgfVxufTtcblxuLy8gOjogTm9kZVNwZWMgQSBoZWFkaW5nIHRleHRibG9jaywgd2l0aCBhIGBsZXZlbGAgYXR0cmlidXRlIHRoYXRcbi8vIHNob3VsZCBob2xkIHRoZSBudW1iZXIgMSB0byA2LiBQYXJzZWQgYW5kIHNlcmlhbGl6ZWQgYXMgYDxoMT5gIHRvXG4vLyBgPGg2PmAgZWxlbWVudHMuXG5jb25zdCBoZWFkaW5nOiBOb2RlU3BlYyA9IHtcbiAgYXR0cnM6IHtcbiAgICBsZXZlbDoge1xuICAgICAgZGVmYXVsdDogMVxuICAgIH0sXG4gICAgYWxpZ246IHtcbiAgICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgfVxuICB9LFxuICBjb250ZW50OiAnaW5saW5lKicsXG4gIGdyb3VwOiAnYmxvY2snLFxuICBkZWZpbmluZzogdHJ1ZSxcbiAgcGFyc2VET006IFtcbiAgICB7XG4gICAgICB0YWc6ICdoMScsXG4gICAgICBnZXRBdHRycyhkb206IEhUTUxFbGVtZW50KTogUmVjb3JkPHN0cmluZywgYW55PiB7XG4gICAgICAgIGNvbnN0IHsgdGV4dEFsaWduIH0gPSBkb20uc3R5bGU7XG4gICAgICAgIGNvbnN0IGFsaWduID0gZG9tLmdldEF0dHJpYnV0ZSgnYWxpZ24nKSB8fCB0ZXh0QWxpZ24gfHwgbnVsbDtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGxldmVsOiAxLFxuICAgICAgICAgIGFsaWduXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICB0YWc6ICdoMicsXG4gICAgICBnZXRBdHRycyhkb206IEhUTUxFbGVtZW50KTogUmVjb3JkPHN0cmluZywgYW55PiB7XG4gICAgICAgIGNvbnN0IHsgdGV4dEFsaWduIH0gPSBkb20uc3R5bGU7XG4gICAgICAgIGNvbnN0IGFsaWduID0gZG9tLmdldEF0dHJpYnV0ZSgnYWxpZ24nKSB8fCB0ZXh0QWxpZ24gfHwgbnVsbDtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGxldmVsOiAyLFxuICAgICAgICAgIGFsaWduXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICB0YWc6ICdoMycsXG4gICAgICBnZXRBdHRycyhkb206IEhUTUxFbGVtZW50KTogUmVjb3JkPHN0cmluZywgYW55PiB7XG4gICAgICAgIGNvbnN0IHsgdGV4dEFsaWduIH0gPSBkb20uc3R5bGU7XG4gICAgICAgIGNvbnN0IGFsaWduID0gZG9tLmdldEF0dHJpYnV0ZSgnYWxpZ24nKSB8fCB0ZXh0QWxpZ24gfHwgbnVsbDtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGxldmVsOiAzLFxuICAgICAgICAgIGFsaWduXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICB0YWc6ICdoNCcsXG4gICAgICBnZXRBdHRycyhkb206IEhUTUxFbGVtZW50KTogUmVjb3JkPHN0cmluZywgYW55PiB7XG4gICAgICAgIGNvbnN0IHsgdGV4dEFsaWduIH0gPSBkb20uc3R5bGU7XG4gICAgICAgIGNvbnN0IGFsaWduID0gZG9tLmdldEF0dHJpYnV0ZSgnYWxpZ24nKSB8fCB0ZXh0QWxpZ24gfHwgbnVsbDtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGxldmVsOiA0LFxuICAgICAgICAgIGFsaWduXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICB0YWc6ICdoNScsXG4gICAgICBnZXRBdHRycyhkb206IEhUTUxFbGVtZW50KTogUmVjb3JkPHN0cmluZywgYW55PiB7XG4gICAgICAgIGNvbnN0IHsgdGV4dEFsaWduIH0gPSBkb20uc3R5bGU7XG4gICAgICAgIGNvbnN0IGFsaWduID0gZG9tLmdldEF0dHJpYnV0ZSgnYWxpZ24nKSB8fCB0ZXh0QWxpZ24gfHwgbnVsbDtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGxldmVsOiA1LFxuICAgICAgICAgIGFsaWduXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICB0YWc6ICdoNicsXG4gICAgICBnZXRBdHRycyhkb206IEhUTUxFbGVtZW50KTogUmVjb3JkPHN0cmluZywgYW55PiB7XG4gICAgICAgIGNvbnN0IHsgdGV4dEFsaWduIH0gPSBkb20uc3R5bGU7XG4gICAgICAgIGNvbnN0IGFsaWduID0gZG9tLmdldEF0dHJpYnV0ZSgnYWxpZ24nKSB8fCB0ZXh0QWxpZ24gfHwgbnVsbDtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGxldmVsOiA2LFxuICAgICAgICAgIGFsaWduXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSxcbiAgXSxcbiAgdG9ET00obm9kZSk6IERPTU91dHB1dFNwZWMge1xuICAgIGNvbnN0IHsgbGV2ZWwsIGFsaWduIH0gPSBub2RlLmF0dHJzO1xuXG4gICAgY29uc3Qgc3R5bGVzOiBQYXJ0aWFsPENTU1N0eWxlRGVjbGFyYXRpb24+ID0ge1xuICAgICAgdGV4dEFsaWduOiBhbGlnbiAhPT0gJ2xlZnQnID8gYWxpZ24gOiBudWxsXG4gICAgfTtcbiAgICBjb25zdCBzdHlsZSA9IHRvU3R5bGVTdHJpbmcoc3R5bGVzKSB8fCBudWxsO1xuXG4gICAgcmV0dXJuIFsnaCcgKyBsZXZlbCwgeyBzdHlsZSB9LCAwXTtcbiAgfVxufTtcblxuLy8gOjogTm9kZVNwZWMgQSBjb2RlIGxpc3RpbmcuIERpc2FsbG93cyBtYXJrcyBvciBub24tdGV4dCBpbmxpbmVcbi8vIG5vZGVzIGJ5IGRlZmF1bHQuIFJlcHJlc2VudGVkIGFzIGEgYDxwcmU+YCBlbGVtZW50IHdpdGggYVxuLy8gYDxjb2RlPmAgZWxlbWVudCBpbnNpZGUgb2YgaXQuXG5jb25zdCBjb2RlQmxvY2s6IE5vZGVTcGVjID0ge1xuICBjb250ZW50OiAndGV4dConLFxuICBtYXJrczogJycsXG4gIGdyb3VwOiAnYmxvY2snLFxuICBjb2RlOiB0cnVlLFxuICBkZWZpbmluZzogdHJ1ZSxcbiAgcGFyc2VET006IFtcbiAgICB7XG4gICAgICB0YWc6ICdwcmUnLFxuICAgICAgcHJlc2VydmVXaGl0ZXNwYWNlOiAnZnVsbCdcbiAgICB9XG4gIF0sXG4gIHRvRE9NKCk6IERPTU91dHB1dFNwZWMge1xuICAgIHJldHVybiBbJ3ByZScsIFsnY29kZScsIDBdXTtcbiAgfVxufTtcblxuLy8gOjogTm9kZVNwZWMgQSBoYXJkIGxpbmUgYnJlYWssIHJlcHJlc2VudGVkIGluIHRoZSBET00gYXMgYDxicj5gLlxuY29uc3QgaGFyZEJyZWFrOiBOb2RlU3BlYyA9IHtcbiAgaW5saW5lOiB0cnVlLFxuICBncm91cDogJ2lubGluZScsXG4gIHNlbGVjdGFibGU6IGZhbHNlLFxuICBwYXJzZURPTTogW3sgdGFnOiAnYnInIH1dLFxuICB0b0RPTSgpOiBET01PdXRwdXRTcGVjIHtcbiAgICByZXR1cm4gWydiciddO1xuICB9XG59O1xuXG4vLyA6OiBOb2RlU3BlYyBBbiBpbmxpbmUgaW1hZ2UgKGA8aW1nPmApIG5vZGUuIFN1cHBvcnRzIGBzcmNgLFxuLy8gYGFsdGAsIGFuZCBgaHJlZmAgYXR0cmlidXRlcy4gVGhlIGxhdHRlciB0d28gZGVmYXVsdCB0byB0aGUgZW1wdHlcbi8vIHN0cmluZy5cbmV4cG9ydCBjb25zdCBpbWFnZTogTm9kZVNwZWMgPSB7XG4gIGlubGluZTogdHJ1ZSxcbiAgYXR0cnM6IHtcbiAgICBzcmM6IHt9LFxuICAgIGFsdDogeyBkZWZhdWx0OiBudWxsIH0sXG4gICAgdGl0bGU6IHsgZGVmYXVsdDogbnVsbCB9LFxuICAgIHdpZHRoOiB7IGRlZmF1bHQ6IG51bGwgfVxuICB9LFxuICBncm91cDogJ2lubGluZScsXG4gIGRyYWdnYWJsZTogdHJ1ZSxcbiAgcGFyc2VET006IFtcbiAgICB7XG4gICAgICB0YWc6ICdpbWdbc3JjXScsXG4gICAgICBnZXRBdHRycyhkb206IEhUTUxFbGVtZW50KTogUmVjb3JkPHN0cmluZywgYW55PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc3JjOiBkb20uZ2V0QXR0cmlidXRlKCdzcmMnKSxcbiAgICAgICAgICB0aXRsZTogZG9tLmdldEF0dHJpYnV0ZSgndGl0bGUnKSxcbiAgICAgICAgICBhbHQ6IGRvbS5nZXRBdHRyaWJ1dGUoJ2FsdCcpLFxuICAgICAgICAgIHdpZHRoOiBkb20uZ2V0QXR0cmlidXRlKCd3aWR0aCcpXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuICBdLFxuICB0b0RPTShub2RlOiBQcm9zZW1pcnJvck5vZGUpOiBET01PdXRwdXRTcGVjIHtcbiAgICBjb25zdCB7IHNyYywgYWx0LCB0aXRsZSwgd2lkdGggfSA9IG5vZGUuYXR0cnM7XG4gICAgcmV0dXJuIFsnaW1nJywgeyBzcmMsIGFsdCwgdGl0bGUsIHdpZHRoIH1dO1xuICB9XG59O1xuXG5jb25zdCBsaXN0SXRlbSA9IHtcbiAgLi4uc2wubGlzdEl0ZW0sXG4gIGNvbnRlbnQ6ICdwYXJhZ3JhcGggYmxvY2sqJ1xufTtcblxuY29uc3Qgb3JkZXJlZExpc3QgPSB7XG4gIC4uLnNsLm9yZGVyZWRMaXN0LFxuICBjb250ZW50OiAnbGlzdF9pdGVtKycsXG4gIGdyb3VwOiAnYmxvY2snXG59O1xuXG5jb25zdCBidWxsZXRMaXN0ID0ge1xuICAuLi5zbC5idWxsZXRMaXN0LFxuICBjb250ZW50OiAnbGlzdF9pdGVtKycsXG4gIGdyb3VwOiAnYmxvY2snXG59O1xuXG5jb25zdCBub2RlcyA9IHtcbiAgZG9jLFxuICB0ZXh0LFxuICBwYXJhZ3JhcGgsXG4gIGJsb2NrcXVvdGUsXG4gIGhvcml6b250YWxfcnVsZTogaG9yaXpvbnRhbFJ1bGUsXG4gIGhlYWRpbmcsXG4gIGhhcmRfYnJlYWs6IGhhcmRCcmVhayxcbiAgY29kZV9ibG9jazogY29kZUJsb2NrLFxuICBpbWFnZSxcbiAgbGlzdF9pdGVtOiBsaXN0SXRlbSxcbiAgb3JkZXJlZF9saXN0OiBvcmRlcmVkTGlzdCxcbiAgYnVsbGV0X2xpc3Q6IGJ1bGxldExpc3Rcbn07XG5cbmV4cG9ydCBkZWZhdWx0IG5vZGVzO1xuIl19