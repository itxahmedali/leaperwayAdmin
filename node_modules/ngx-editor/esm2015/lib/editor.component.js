import { Component, ViewChild, forwardRef, ViewEncapsulation, Output, EventEmitter, Input, } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { EditorState, Plugin, PluginKey } from 'prosemirror-state';
import { EditorView } from 'prosemirror-view';
import { NgxEditorService } from './editor.service';
import { SharedService } from './services/shared/shared.service';
import { editable as editablePlugin, placeholder as placeholderPlugin } from 'ngx-editor/plugins';
import { parseValue, toHTML } from './parsers';
export class NgxEditorComponent {
    constructor(ngxEditorService, sharedService) {
        this.sharedService = sharedService;
        this.editorInitialized = false;
        this.placeholder = 'Type here...';
        this.editable = true;
        this.init = new EventEmitter();
        this.focusOut = new EventEmitter();
        this.focusIn = new EventEmitter();
        this.config = ngxEditorService.config;
    }
    get toolbar() {
        var _a;
        return (_a = this.config.menu) === null || _a === void 0 ? void 0 : _a.toolbar;
    }
    writeValue(value) {
        if (!this.editorInitialized) {
            return;
        }
        if (!this.outputFormat && typeof value === 'string') {
            this.outputFormat = 'html';
        }
        this.updateContent(value);
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    updateContent(value) {
        try {
            const { state } = this.view;
            const { tr, doc } = state;
            const newDoc = parseValue(value, this.config.schema);
            tr.replaceWith(0, state.doc.content.size, newDoc)
                .setMeta('PREVENT_ONCHANGE', true);
            // don't emit if both content is same
            if (doc !== null && doc.eq(tr.doc)) {
                return;
            }
            if (!tr.docChanged) {
                return;
            }
            this.view.dispatch(tr);
        }
        catch (err) {
            console.error('Unable to update document.', err);
        }
    }
    handleTransactions(tr) {
        const { state } = this.view.state.applyTransaction(tr);
        this.view.updateState(state);
        if (!tr.docChanged || !this.onChange || tr.getMeta('PREVENT_ONCHANGE')) {
            return;
        }
        const json = state.doc.toJSON();
        if (this.outputFormat === 'html') {
            const html = toHTML(json, this.config.schema);
            this.onChange(html);
            return;
        }
        this.onChange(json);
    }
    createUpdateWatcherPlugin() {
        const plugin = new Plugin({
            key: new PluginKey('ngx-update-watcher'),
            view: () => {
                return {
                    update: (view) => this.sharedService.plugin.update.next(view),
                    destroy: () => this.sharedService.plugin.destroy.next()
                };
            }
        });
        return plugin;
    }
    filterBuiltIns(plugin) {
        const pluginKey = plugin.key;
        if (/^(editable|placeholder)\$/.test(pluginKey)) {
            return false;
        }
        return true;
    }
    createEditor() {
        const { schema, plugins, nodeViews } = this.config;
        this.view = new EditorView(this.ngxEditor.nativeElement, {
            state: EditorState.create({
                doc: null,
                schema,
                plugins: [
                    ...plugins.filter((plugin) => this.filterBuiltIns(plugin)),
                    this.createUpdateWatcherPlugin(),
                    placeholderPlugin(this.placeholder),
                    editablePlugin(this.editable)
                ]
            }),
            nodeViews,
            dispatchTransaction: this.handleTransactions.bind(this),
            handleDOMEvents: {
                focus: () => {
                    this.focusIn.emit();
                    return false;
                },
                blur: () => {
                    this.onTouched();
                    this.focusOut.emit();
                    return false;
                }
            },
            attributes: {
                class: 'NgxEditor__Content'
            },
        });
        this.editorInitialized = true;
        this.sharedService.view = this.view;
        this.sharedService.setCustomMenuRef(this.customMenuRef);
        this.init.emit(this.view);
    }
    setPlaceholder(newPlaceholder) {
        const { dispatch, state: { tr } } = this.view;
        const placeholder = newPlaceholder !== null && newPlaceholder !== void 0 ? newPlaceholder : this.placeholder;
        dispatch(tr.setMeta('UPDATE_PLACEHOLDER', placeholder));
    }
    updateEditable(edit) {
        const { dispatch, state: { tr } } = this.view;
        dispatch(tr.setMeta('UPDATE_EDITABLE', edit));
    }
    ngOnInit() {
        this.createEditor();
        this.setPlaceholder();
    }
    ngOnChanges(changes) {
        if ((changes === null || changes === void 0 ? void 0 : changes.placeholder) && !changes.placeholder.isFirstChange()) {
            this.setPlaceholder(changes.placeholder.currentValue);
        }
        if ((changes === null || changes === void 0 ? void 0 : changes.editable) && !changes.editable.isFirstChange()) {
            this.updateEditable(changes.editable.currentValue);
        }
    }
    ngOnDestroy() {
        this.view.destroy();
    }
}
NgxEditorComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-editor',
                template: "<div class=\"NgxEditor\" #ngxEditor>\n  <ngx-menu \n    [toolbar]=\"toolbar\" \n    [editorView]=\"view\"\n    *ngIf=\"toolbar\"\n    [disabled]=\"!editable\"\n  >\n  </ngx-menu>\n  <ngx-bubble></ngx-bubble>\n</div>\n",
                providers: [{
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => NgxEditorComponent),
                        multi: true
                    }],
                encapsulation: ViewEncapsulation.None,
                styles: [".NgxEditor{background:#fff;background-clip:padding-box;border:2px solid rgba(0,0,0,.2);border-radius:4px;color:#000;overflow:hidden;position:relative}.NgxEditor--Disabled{opacity:.5;pointer-events:none}.NgxEditor__Placeholder{-moz-user-select:none;-ms-user-select:none;-webkit-user-select:none;color:#6c757d;cursor:text;opacity:1;position:absolute;user-select:none}.NgxEditor__Content{padding:.5rem;white-space:pre-wrap}.NgxEditor__Content p{margin:0 0 .7rem}.NgxEditor__Content blockquote{border-left:3px solid #ddd;margin-left:0;margin-right:0;padding-left:1rem}.NgxEditor__Content--Disabled{-moz-user-select:none;-ms-user-select:none;-webkit-user-select:none;pointer-events:none;user-select:none}.NgxEditor__ImageWrapper{display:inline-block;line-height:0;padding:2px;position:relative}.NgxEditor__ImageWrapper.NgxEditor__Resizer--Active{border:1px solid #1a73e8;padding:1px}.NgxEditor__ImageWrapper .NgxEditor__ResizeHandle{display:none;height:100%;position:absolute;width:100%}.NgxEditor__ImageWrapper .NgxEditor__ResizeHandle .NgxEditor__ResizeHandle--BL,.NgxEditor__ImageWrapper .NgxEditor__ResizeHandle .NgxEditor__ResizeHandle--BR,.NgxEditor__ImageWrapper .NgxEditor__ResizeHandle .NgxEditor__ResizeHandle--TL,.NgxEditor__ImageWrapper .NgxEditor__ResizeHandle .NgxEditor__ResizeHandle--TR{background-color:#1a73e8;border:1px solid #fff;height:7px;position:absolute;width:7px}.NgxEditor__ImageWrapper .NgxEditor__ResizeHandle .NgxEditor__ResizeHandle--BR{bottom:-5px;cursor:se-resize;right:-5px}.NgxEditor__ImageWrapper .NgxEditor__ResizeHandle .NgxEditor__ResizeHandle--TR{cursor:ne-resize;right:-5px;top:-5px}.NgxEditor__ImageWrapper .NgxEditor__ResizeHandle .NgxEditor__ResizeHandle--TL{cursor:nw-resize;left:-5px;top:-5px}.NgxEditor__ImageWrapper .NgxEditor__ResizeHandle .NgxEditor__ResizeHandle--BL{bottom:-5px;cursor:sw-resize;left:-5px}.ProseMirror{outline:none}.NgxEditor__HelpText{font-size:80%}.NgxEditor__HelpText.NgxEditor__HelpText--Error{color:red}"]
            },] }
];
NgxEditorComponent.ctorParameters = () => [
    { type: NgxEditorService },
    { type: SharedService }
];
NgxEditorComponent.propDecorators = {
    ngxEditor: [{ type: ViewChild, args: ['ngxEditor', { static: true },] }],
    outputFormat: [{ type: Input }],
    customMenuRef: [{ type: Input }],
    placeholder: [{ type: Input }],
    editable: [{ type: Input }],
    init: [{ type: Output }],
    focusOut: [{ type: Output }],
    focusIn: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,