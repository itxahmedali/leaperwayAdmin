import { NodeSelection } from 'prosemirror-state';
class Image {
    execute(attrs = {}, state, dispatch) {
        const { schema, tr, selection } = state;
        const type = schema.nodes.image;
        if (!type) {
            return false;
        }
        const nodeAttrs = Object.assign(Object.assign({}, attrs), { width: null });
        if (selection instanceof NodeSelection && selection.node.type === type) {
            nodeAttrs.width = selection.node.attrs.width;
        }
        tr.replaceSelectionWith(type.createAndFill(nodeAttrs));
        if (tr.docChanged) {
            dispatch === null || dispatch === void 0 ? void 0 : dispatch(tr);
            return true;
        }
        return false;
    }
    isActive(state) {
        const { selection } = state;
        if (selection instanceof NodeSelection) {
            return selection.node.type.name === 'image';
        }
        return false;
    }
}
export default Image;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW1hZ2UuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4vc3JjLyIsInNvdXJjZXMiOlsibGliL2NvbW1hbmRzL0ltYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBZSxhQUFhLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUkvRCxNQUFNLEtBQUs7SUFDVCxPQUFPLENBQUMsS0FBSyxHQUFHLEVBQUUsRUFBRSxLQUFrQixFQUFFLFFBQWtCO1FBQ3hELE1BQU0sRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFLFNBQVMsRUFBRSxHQUFHLEtBQUssQ0FBQztRQUV4QyxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQztRQUNoQyxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ1QsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUVELE1BQU0sU0FBUyxtQ0FBUSxLQUFLLEtBQUUsS0FBSyxFQUFFLElBQUksR0FBRSxDQUFDO1FBRTVDLElBQUksU0FBUyxZQUFZLGFBQWEsSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxJQUFJLEVBQUU7WUFDdEUsU0FBUyxDQUFDLEtBQUssR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUM7U0FDOUM7UUFFRCxFQUFFLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBRXZELElBQUksRUFBRSxDQUFDLFVBQVUsRUFBRTtZQUNqQixRQUFRLGFBQVIsUUFBUSx1QkFBUixRQUFRLENBQUcsRUFBRSxFQUFFO1lBQ2YsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUVELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUVELFFBQVEsQ0FBQyxLQUFrQjtRQUN6QixNQUFNLEVBQUUsU0FBUyxFQUFFLEdBQUcsS0FBSyxDQUFDO1FBQzVCLElBQUksU0FBUyxZQUFZLGFBQWEsRUFBRTtZQUN0QyxPQUFPLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxPQUFPLENBQUM7U0FDN0M7UUFFRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7Q0FDRjtBQUVELGVBQWUsS0FBSyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWRpdG9yU3RhdGUsIE5vZGVTZWxlY3Rpb24gfSBmcm9tICdwcm9zZW1pcnJvci1zdGF0ZSc7XG5cbmltcG9ydCB7IERpc3BhdGNoIH0gZnJvbSAnLi90eXBlcyc7XG5cbmNsYXNzIEltYWdlIHtcbiAgZXhlY3V0ZShhdHRycyA9IHt9LCBzdGF0ZTogRWRpdG9yU3RhdGUsIGRpc3BhdGNoOiBEaXNwYXRjaCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IHsgc2NoZW1hLCB0ciwgc2VsZWN0aW9uIH0gPSBzdGF0ZTtcblxuICAgIGNvbnN0IHR5cGUgPSBzY2hlbWEubm9kZXMuaW1hZ2U7XG4gICAgaWYgKCF0eXBlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgY29uc3Qgbm9kZUF0dHJzID0geyAuLi5hdHRycywgd2lkdGg6IG51bGwgfTtcblxuICAgIGlmIChzZWxlY3Rpb24gaW5zdGFuY2VvZiBOb2RlU2VsZWN0aW9uICYmIHNlbGVjdGlvbi5ub2RlLnR5cGUgPT09IHR5cGUpIHtcbiAgICAgIG5vZGVBdHRycy53aWR0aCA9IHNlbGVjdGlvbi5ub2RlLmF0dHJzLndpZHRoO1xuICAgIH1cblxuICAgIHRyLnJlcGxhY2VTZWxlY3Rpb25XaXRoKHR5cGUuY3JlYXRlQW5kRmlsbChub2RlQXR0cnMpKTtcblxuICAgIGlmICh0ci5kb2NDaGFuZ2VkKSB7XG4gICAgICBkaXNwYXRjaD8uKHRyKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlzQWN0aXZlKHN0YXRlOiBFZGl0b3JTdGF0ZSk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IHsgc2VsZWN0aW9uIH0gPSBzdGF0ZTtcbiAgICBpZiAoc2VsZWN0aW9uIGluc3RhbmNlb2YgTm9kZVNlbGVjdGlvbikge1xuICAgICAgcmV0dXJuIHNlbGVjdGlvbi5ub2RlLnR5cGUubmFtZSA9PT0gJ2ltYWdlJztcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSW1hZ2U7XG4iXX0=