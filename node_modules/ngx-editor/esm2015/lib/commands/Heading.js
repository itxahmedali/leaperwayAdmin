import { setBlockType } from 'prosemirror-commands';
import { getSelectionNodes } from 'ngx-editor/helpers';
class Heading {
    constructor(level) {
        this.level = level;
    }
    execute(state, dispatch) {
        var _a;
        const { schema, selection, doc } = state;
        const type = schema.nodes.heading;
        if (!type) {
            return false;
        }
        const nodePos = selection.$from.before(1);
        const node = doc.nodeAt(nodePos);
        const attrs = (_a = node === null || node === void 0 ? void 0 : node.attrs) !== null && _a !== void 0 ? _a : {};
        if (this.isActive(state)) {
            return setBlockType(schema.nodes.paragraph, attrs)(state, dispatch);
        }
        return setBlockType(type, Object.assign(Object.assign({}, attrs), { level: this.level }))(state, dispatch);
    }
    isActive(state) {
        const { schema } = state;
        const nodesInSelection = getSelectionNodes(state);
        const type = schema.nodes.heading;
        if (!type) {
            return false;
        }
        const supportedNodes = [
            type,
            schema.nodes.text,
            schema.nodes.blockquote
        ];
        // heading is a text node
        // don't mark as active when it has more nodes
        const nodes = nodesInSelection.filter(node => {
            return supportedNodes.includes(node.type);
        });
        const acitveNode = nodes.find((node) => {
            return node.attrs.level === this.level;
        });
        return Boolean(acitveNode);
    }
    canExecute(state) {
        return this.execute(state, null);
    }
}
export default Heading;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSGVhZGluZy5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLi9zcmMvIiwic291cmNlcyI6WyJsaWIvY29tbWFuZHMvSGVhZGluZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFcEQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFJdkQsTUFBTSxPQUFPO0lBR1gsWUFBWSxLQUFZO1FBQ3RCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0lBQ3JCLENBQUM7SUFFRCxPQUFPLENBQUMsS0FBa0IsRUFBRSxRQUFvQzs7UUFDOUQsTUFBTSxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLEdBQUcsS0FBSyxDQUFDO1FBRXpDLE1BQU0sSUFBSSxHQUFhLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDO1FBQzVDLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDVCxPQUFPLEtBQUssQ0FBQztTQUNkO1FBRUQsTUFBTSxPQUFPLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUMsTUFBTSxJQUFJLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUVqQyxNQUFNLEtBQUssU0FBRyxJQUFJLGFBQUosSUFBSSx1QkFBSixJQUFJLENBQUUsS0FBSyxtQ0FBSSxFQUFFLENBQUM7UUFFaEMsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3hCLE9BQU8sWUFBWSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztTQUNyRTtRQUVELE9BQU8sWUFBWSxDQUFDLElBQUksa0NBQU8sS0FBSyxLQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxJQUFHLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQzlFLENBQUM7SUFFRCxRQUFRLENBQUMsS0FBa0I7UUFDekIsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLEtBQUssQ0FBQztRQUN6QixNQUFNLGdCQUFnQixHQUFHLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRWxELE1BQU0sSUFBSSxHQUFhLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDO1FBQzVDLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDVCxPQUFPLEtBQUssQ0FBQztTQUNkO1FBRUQsTUFBTSxjQUFjLEdBQUc7WUFDckIsSUFBSTtZQUNKLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSTtZQUNqQixNQUFNLENBQUMsS0FBSyxDQUFDLFVBQVU7U0FDeEIsQ0FBQztRQUVGLHlCQUF5QjtRQUN6Qiw4Q0FBOEM7UUFDOUMsTUFBTSxLQUFLLEdBQUcsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQzNDLE9BQU8sY0FBYyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDNUMsQ0FBQyxDQUFDLENBQUM7UUFFSCxNQUFNLFVBQVUsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBcUIsRUFBRSxFQUFFO1lBQ3RELE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEtBQUssSUFBSSxDQUFDLEtBQUssQ0FBQztRQUN6QyxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFFRCxVQUFVLENBQUMsS0FBa0I7UUFDM0IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNuQyxDQUFDO0NBQ0Y7QUFFRCxlQUFlLE9BQU8sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5vZGVUeXBlLCBOb2RlIGFzIFByb3NlbWlycm9yTm9kZSB9IGZyb20gJ3Byb3NlbWlycm9yLW1vZGVsJztcbmltcG9ydCB7IEVkaXRvclN0YXRlLCBUcmFuc2FjdGlvbiB9IGZyb20gJ3Byb3NlbWlycm9yLXN0YXRlJztcbmltcG9ydCB7IHNldEJsb2NrVHlwZSB9IGZyb20gJ3Byb3NlbWlycm9yLWNvbW1hbmRzJztcblxuaW1wb3J0IHsgZ2V0U2VsZWN0aW9uTm9kZXMgfSBmcm9tICduZ3gtZWRpdG9yL2hlbHBlcnMnO1xuXG50eXBlIExldmVsID0gMSB8IDIgfCAzIHwgNCB8IDUgfCA2O1xuXG5jbGFzcyBIZWFkaW5nIHtcbiAgbGV2ZWw6IG51bWJlcjtcblxuICBjb25zdHJ1Y3RvcihsZXZlbDogTGV2ZWwpIHtcbiAgICB0aGlzLmxldmVsID0gbGV2ZWw7XG4gIH1cblxuICBleGVjdXRlKHN0YXRlOiBFZGl0b3JTdGF0ZSwgZGlzcGF0Y2g/OiAodHI6IFRyYW5zYWN0aW9uKSA9PiB2b2lkKTogYm9vbGVhbiB7XG4gICAgY29uc3QgeyBzY2hlbWEsIHNlbGVjdGlvbiwgZG9jIH0gPSBzdGF0ZTtcblxuICAgIGNvbnN0IHR5cGU6IE5vZGVUeXBlID0gc2NoZW1hLm5vZGVzLmhlYWRpbmc7XG4gICAgaWYgKCF0eXBlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgY29uc3Qgbm9kZVBvcyA9IHNlbGVjdGlvbi4kZnJvbS5iZWZvcmUoMSk7XG4gICAgY29uc3Qgbm9kZSA9IGRvYy5ub2RlQXQobm9kZVBvcyk7XG5cbiAgICBjb25zdCBhdHRycyA9IG5vZGU/LmF0dHJzID8/IHt9O1xuXG4gICAgaWYgKHRoaXMuaXNBY3RpdmUoc3RhdGUpKSB7XG4gICAgICByZXR1cm4gc2V0QmxvY2tUeXBlKHNjaGVtYS5ub2Rlcy5wYXJhZ3JhcGgsIGF0dHJzKShzdGF0ZSwgZGlzcGF0Y2gpO1xuICAgIH1cblxuICAgIHJldHVybiBzZXRCbG9ja1R5cGUodHlwZSwgeyAuLi5hdHRycywgbGV2ZWw6IHRoaXMubGV2ZWwgfSkoc3RhdGUsIGRpc3BhdGNoKTtcbiAgfVxuXG4gIGlzQWN0aXZlKHN0YXRlOiBFZGl0b3JTdGF0ZSk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IHsgc2NoZW1hIH0gPSBzdGF0ZTtcbiAgICBjb25zdCBub2Rlc0luU2VsZWN0aW9uID0gZ2V0U2VsZWN0aW9uTm9kZXMoc3RhdGUpO1xuXG4gICAgY29uc3QgdHlwZTogTm9kZVR5cGUgPSBzY2hlbWEubm9kZXMuaGVhZGluZztcbiAgICBpZiAoIXR5cGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBjb25zdCBzdXBwb3J0ZWROb2RlcyA9IFtcbiAgICAgIHR5cGUsXG4gICAgICBzY2hlbWEubm9kZXMudGV4dCxcbiAgICAgIHNjaGVtYS5ub2Rlcy5ibG9ja3F1b3RlXG4gICAgXTtcblxuICAgIC8vIGhlYWRpbmcgaXMgYSB0ZXh0IG5vZGVcbiAgICAvLyBkb24ndCBtYXJrIGFzIGFjdGl2ZSB3aGVuIGl0IGhhcyBtb3JlIG5vZGVzXG4gICAgY29uc3Qgbm9kZXMgPSBub2Rlc0luU2VsZWN0aW9uLmZpbHRlcihub2RlID0+IHtcbiAgICAgIHJldHVybiBzdXBwb3J0ZWROb2Rlcy5pbmNsdWRlcyhub2RlLnR5cGUpO1xuICAgIH0pO1xuXG4gICAgY29uc3QgYWNpdHZlTm9kZSA9IG5vZGVzLmZpbmQoKG5vZGU6IFByb3NlbWlycm9yTm9kZSkgPT4ge1xuICAgICAgcmV0dXJuIG5vZGUuYXR0cnMubGV2ZWwgPT09IHRoaXMubGV2ZWw7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gQm9vbGVhbihhY2l0dmVOb2RlKTtcbiAgfVxuXG4gIGNhbkV4ZWN1dGUoc3RhdGU6IEVkaXRvclN0YXRlKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuZXhlY3V0ZShzdGF0ZSwgbnVsbCk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSGVhZGluZztcbiJdfQ==