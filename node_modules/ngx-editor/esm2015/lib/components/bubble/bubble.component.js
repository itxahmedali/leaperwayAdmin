import { Component, ElementRef, Renderer2 } from '@angular/core';
import { NodeSelection } from 'prosemirror-state';
import { calculateBubblePos, getSelectionMarks, isLinkActive } from 'ngx-editor/helpers';
import { removeLink } from 'ngx-editor/commands';
import { SharedService } from '../../services/shared/shared.service';
export class BubbleComponent {
    constructor(sharedService, el, renderer) {
        this.sharedService = sharedService;
        this.el = el;
        this.renderer = renderer;
        this.pluginUpdateSubscription = this.sharedService.plugin.update.subscribe((view) => {
            this.view = view;
            this.update(view);
        });
    }
    setDomPosition(view) {
        // Otherwise, reposition it and update its content
        this.showBubble();
        const { bottom, left } = calculateBubblePos(view, this.el.nativeElement);
        this.renderer.setStyle(this.el.nativeElement, 'left', `${left}px`);
        this.renderer.setStyle(this.el.nativeElement, 'bottom', `${bottom}px`);
    }
    showBubble() {
        this.renderer.setStyle(this.el.nativeElement, 'display', '');
    }
    hideBubble() {
        this.renderer.setStyle(this.el.nativeElement, 'display', 'none');
    }
    removeLink() {
        const { state, dispatch } = this.view;
        removeLink()(state, dispatch);
        this.view.focus();
    }
    update(view) {
        const { state } = view;
        const { schema, selection } = state;
        if (!schema.marks.link) {
            return;
        }
        if (selection instanceof NodeSelection) {
            if (selection.node.type.name === 'image') {
                return;
            }
        }
        const hasFocus = view.hasFocus();
        const isActive = isLinkActive(state);
        const linkMarks = getSelectionMarks(state).filter(mark => mark.type === schema.marks.link);
        // hide for selection and show only for clicks
        if (!hasFocus || !isActive) {
            this.hideBubble();
            return;
        }
        const [linkItem] = linkMarks;
        this.activeLinkItem = linkItem;
        // update dom position
        this.setDomPosition(view);
    }
    ngOnInit() {
    }
    ngOnDestroy() {
        this.pluginUpdateSubscription.unsubscribe();
    }
}
BubbleComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-bubble',
                template: "<ng-container *ngIf=\"activeLinkItem\">\n  <a [href]=\"activeLinkItem.attrs.href\" target=\"_blank\" [title]=\"activeLinkItem.attrs.href\">\n    {{activeLinkItem.attrs.href}}\n  </a>\n  <div class=\"commands\">\n    <button class=\"command\" (click)=\"removeLink()\">Remove link</button>\n  </div>\n</ng-container>\n",
                styles: [":host{align-items:center;background:#fff;border:1px solid silver;border-radius:4px;display:flex;margin-bottom:.3rem;padding:.3rem;position:absolute;transform:translateX(-50%);z-index:20}:host:after,:host:before{border:solid transparent;border-width:5px 5px 0;content:\"\";height:0;left:50%;margin-left:-5px;position:absolute;width:0}:host:before{border-top-color:silver;bottom:-6px}:host:after{border-top-color:#fff;bottom:-4.5px}:host a{display:inline-block;margin-left:2px;max-width:15rem;overflow:hidden;text-overflow:ellipsis}:host .commands{display:flex;margin-left:.5rem}:host .commands .command{background-color:#f1f1f1;border:none;border-radius:2px;display:flex;padding:2px;white-space:nowrap}:host .commands .command:hover{text-decoration:underline}"]
            },] }
];
BubbleComponent.ctorParameters = () => [
    { type: SharedService },
    { type: ElementRef },
    { type: Renderer2 }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnViYmxlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLi9zcmMvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9idWJibGUvYnViYmxlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUFFLFVBQVUsRUFDYixTQUFTLEVBQ2xCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUtsRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsaUJBQWlCLEVBQUUsWUFBWSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDekYsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRWpELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQU9yRSxNQUFNLE9BQU8sZUFBZTtJQUsxQixZQUNVLGFBQTRCLEVBQzVCLEVBQWMsRUFDZCxRQUFtQjtRQUZuQixrQkFBYSxHQUFiLGFBQWEsQ0FBZTtRQUM1QixPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQ2QsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQUUzQixJQUFJLENBQUMsd0JBQXdCLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQWdCLEVBQUUsRUFBRTtZQUM5RixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztZQUNqQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3BCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVPLGNBQWMsQ0FBQyxJQUFnQjtRQUNyQyxrREFBa0Q7UUFDbEQsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBRWxCLE1BQU0sRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLEdBQUcsa0JBQWtCLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUM7UUFFekUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsTUFBTSxFQUFFLEdBQUcsSUFBSSxJQUFJLENBQUMsQ0FBQztRQUNuRSxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxRQUFRLEVBQUUsR0FBRyxNQUFNLElBQUksQ0FBQyxDQUFDO0lBQ3pFLENBQUM7SUFFTyxVQUFVO1FBQ2hCLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUMvRCxDQUFDO0lBRU8sVUFBVTtRQUNoQixJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDbkUsQ0FBQztJQUVELFVBQVU7UUFDUixNQUFNLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDdEMsVUFBVSxFQUFFLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQzlCLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDcEIsQ0FBQztJQUVPLE1BQU0sQ0FBQyxJQUFnQjtRQUM3QixNQUFNLEVBQUUsS0FBSyxFQUFFLEdBQUcsSUFBSSxDQUFDO1FBQ3ZCLE1BQU0sRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLEdBQUcsS0FBSyxDQUFDO1FBRXBDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRTtZQUN0QixPQUFPO1NBQ1I7UUFFRCxJQUFJLFNBQVMsWUFBWSxhQUFhLEVBQUU7WUFDdEMsSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssT0FBTyxFQUFFO2dCQUN4QyxPQUFPO2FBQ1I7U0FDRjtRQUVELE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNqQyxNQUFNLFFBQVEsR0FBRyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDckMsTUFBTSxTQUFTLEdBQVcsaUJBQWlCLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRW5HLDhDQUE4QztRQUM5QyxJQUFJLENBQUMsUUFBUSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQzFCLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztZQUNsQixPQUFPO1NBQ1I7UUFFRCxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsU0FBUyxDQUFDO1FBQzdCLElBQUksQ0FBQyxjQUFjLEdBQUcsUUFBUSxDQUFDO1FBRS9CLHNCQUFzQjtRQUN0QixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFFRCxRQUFRO0lBRVIsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsd0JBQXdCLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDOUMsQ0FBQzs7O1lBbEZGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsWUFBWTtnQkFDdEIsd1VBQXNDOzthQUV2Qzs7O1lBTlEsYUFBYTtZQVhULFVBQVU7WUFDYixTQUFTIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBPbkRlc3Ryb3ksXG4gIE9uSW5pdCwgUmVuZGVyZXIyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTm9kZVNlbGVjdGlvbiB9IGZyb20gJ3Byb3NlbWlycm9yLXN0YXRlJztcbmltcG9ydCB7IEVkaXRvclZpZXcgfSBmcm9tICdwcm9zZW1pcnJvci12aWV3JztcbmltcG9ydCB7IE1hcmsgfSBmcm9tICdwcm9zZW1pcnJvci1tb2RlbCc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgY2FsY3VsYXRlQnViYmxlUG9zLCBnZXRTZWxlY3Rpb25NYXJrcywgaXNMaW5rQWN0aXZlIH0gZnJvbSAnbmd4LWVkaXRvci9oZWxwZXJzJztcbmltcG9ydCB7IHJlbW92ZUxpbmsgfSBmcm9tICduZ3gtZWRpdG9yL2NvbW1hbmRzJztcblxuaW1wb3J0IHsgU2hhcmVkU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL3NoYXJlZC9zaGFyZWQuc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ25neC1idWJibGUnLFxuICB0ZW1wbGF0ZVVybDogJy4vYnViYmxlLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vYnViYmxlLmNvbXBvbmVudC5zY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgQnViYmxlQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICBwcml2YXRlIHZpZXc6IEVkaXRvclZpZXc7XG4gIGFjdGl2ZUxpbmtJdGVtOiBNYXJrO1xuICBwcml2YXRlIHBsdWdpblVwZGF0ZVN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgc2hhcmVkU2VydmljZTogU2hhcmVkU2VydmljZSxcbiAgICBwcml2YXRlIGVsOiBFbGVtZW50UmVmLFxuICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMlxuICApIHtcbiAgICB0aGlzLnBsdWdpblVwZGF0ZVN1YnNjcmlwdGlvbiA9IHRoaXMuc2hhcmVkU2VydmljZS5wbHVnaW4udXBkYXRlLnN1YnNjcmliZSgodmlldzogRWRpdG9yVmlldykgPT4ge1xuICAgICAgdGhpcy52aWV3ID0gdmlldztcbiAgICAgIHRoaXMudXBkYXRlKHZpZXcpO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXREb21Qb3NpdGlvbih2aWV3OiBFZGl0b3JWaWV3KTogdm9pZCB7XG4gICAgLy8gT3RoZXJ3aXNlLCByZXBvc2l0aW9uIGl0IGFuZCB1cGRhdGUgaXRzIGNvbnRlbnRcbiAgICB0aGlzLnNob3dCdWJibGUoKTtcblxuICAgIGNvbnN0IHsgYm90dG9tLCBsZWZ0IH0gPSBjYWxjdWxhdGVCdWJibGVQb3ModmlldywgdGhpcy5lbC5uYXRpdmVFbGVtZW50KTtcblxuICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUodGhpcy5lbC5uYXRpdmVFbGVtZW50LCAnbGVmdCcsIGAke2xlZnR9cHhgKTtcbiAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgJ2JvdHRvbScsIGAke2JvdHRvbX1weGApO1xuICB9XG5cbiAgcHJpdmF0ZSBzaG93QnViYmxlKCk6IHZvaWQge1xuICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUodGhpcy5lbC5uYXRpdmVFbGVtZW50LCAnZGlzcGxheScsICcnKTtcbiAgfVxuXG4gIHByaXZhdGUgaGlkZUJ1YmJsZSgpOiB2b2lkIHtcbiAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgJ2Rpc3BsYXknLCAnbm9uZScpO1xuICB9XG5cbiAgcmVtb3ZlTGluaygpOiB2b2lkIHtcbiAgICBjb25zdCB7IHN0YXRlLCBkaXNwYXRjaCB9ID0gdGhpcy52aWV3O1xuICAgIHJlbW92ZUxpbmsoKShzdGF0ZSwgZGlzcGF0Y2gpO1xuICAgIHRoaXMudmlldy5mb2N1cygpO1xuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGUodmlldzogRWRpdG9yVmlldyk6IHZvaWQge1xuICAgIGNvbnN0IHsgc3RhdGUgfSA9IHZpZXc7XG4gICAgY29uc3QgeyBzY2hlbWEsIHNlbGVjdGlvbiB9ID0gc3RhdGU7XG5cbiAgICBpZiAoIXNjaGVtYS5tYXJrcy5saW5rKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHNlbGVjdGlvbiBpbnN0YW5jZW9mIE5vZGVTZWxlY3Rpb24pIHtcbiAgICAgIGlmIChzZWxlY3Rpb24ubm9kZS50eXBlLm5hbWUgPT09ICdpbWFnZScpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGhhc0ZvY3VzID0gdmlldy5oYXNGb2N1cygpO1xuICAgIGNvbnN0IGlzQWN0aXZlID0gaXNMaW5rQWN0aXZlKHN0YXRlKTtcbiAgICBjb25zdCBsaW5rTWFya3M6IE1hcmtbXSA9IGdldFNlbGVjdGlvbk1hcmtzKHN0YXRlKS5maWx0ZXIobWFyayA9PiBtYXJrLnR5cGUgPT09IHNjaGVtYS5tYXJrcy5saW5rKTtcblxuICAgIC8vIGhpZGUgZm9yIHNlbGVjdGlvbiBhbmQgc2hvdyBvbmx5IGZvciBjbGlja3NcbiAgICBpZiAoIWhhc0ZvY3VzIHx8ICFpc0FjdGl2ZSkge1xuICAgICAgdGhpcy5oaWRlQnViYmxlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgW2xpbmtJdGVtXSA9IGxpbmtNYXJrcztcbiAgICB0aGlzLmFjdGl2ZUxpbmtJdGVtID0gbGlua0l0ZW07XG5cbiAgICAvLyB1cGRhdGUgZG9tIHBvc2l0aW9uXG4gICAgdGhpcy5zZXREb21Qb3NpdGlvbih2aWV3KTtcbiAgfVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuXG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLnBsdWdpblVwZGF0ZVN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICB9XG59XG4iXX0=