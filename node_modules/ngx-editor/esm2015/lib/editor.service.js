import { Injectable, Optional } from '@angular/core';
import Locals from './Locals';
import { schema } from './schema';
import * as i0 from "@angular/core";
const DEFAULT_TOOLBAR = [
    ['bold', 'italic'],
    ['code', 'blockquote'],
    ['underline', 'strike'],
    ['ordered_list', 'bullet_list'],
    [{ heading: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'] }],
    ['link', 'image'],
    ['text_color', 'background_color'],
    ['align_left', 'align_center', 'align_right', 'align_justify'],
];
const DEFAULT_COLOR_PRESETS = [
    '#b60205',
    '#d93f0b',
    '#fbca04',
    '#0e8a16',
    '#006b75',
    '#1d76db',
    '#0052cc',
    '#5319e7',
    '#e99695',
    '#f9d0c4',
    '#fef2c0',
    '#c2e0c6',
    '#bfdadc',
    '#c5def5',
    '#bfd4f2',
    '#d4c5f9'
];
const DEFAULT_MENU = {
    toolbar: DEFAULT_TOOLBAR,
    colorPresets: []
};
const DEFAULT_SCHEMA = schema;
const DEFAULT_PLUGINS = [];
export class NgxEditorServiceConfig {
    constructor() {
        this.plugins = DEFAULT_PLUGINS;
        this.nodeViews = {};
        this.schema = DEFAULT_SCHEMA;
        this.menu = DEFAULT_MENU;
        this.locals = {};
    }
}
NgxEditorServiceConfig.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgxEditorServiceConfig_Factory() { return new NgxEditorServiceConfig(); }, token: NgxEditorServiceConfig, providedIn: "root" });
NgxEditorServiceConfig.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
export class NgxEditorService {
    constructor(config) {
        this.config = config;
    }
    get locals() {
        return new Locals(this.config.locals);
    }
    get menu() {
        return this.config.menu;
    }
    get colorPresets() {
        const col = 8;
        const colors = [];
        const { colorPresets } = this.config.menu;
        const allColors = colorPresets.length ? colorPresets : DEFAULT_COLOR_PRESETS;
        allColors.forEach((color, index) => {
            const row = Math.floor(index / col);
            if (!colors[row]) {
                colors.push([]);
            }
            colors[row].push(color);
        });
        return colors;
    }
}
NgxEditorService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgxEditorService_Factory() { return new NgxEditorService(i0.ɵɵinject(NgxEditorServiceConfig, 8)); }, token: NgxEditorService, providedIn: "root" });
NgxEditorService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
NgxEditorService.ctorParameters = () => [
    { type: NgxEditorServiceConfig, decorators: [{ type: Optional }] }
];
export const provideMyServiceOptions = (config) => {
    var _a, _b, _c, _d;
    let menu;
    if (config.menu !== null) {
        if (!config.menu) {
            menu = DEFAULT_MENU;
        }
        else if (Array.isArray(config.menu)) {
            menu = Object.assign(Object.assign({}, DEFAULT_MENU), { toolbar: config.menu });
        }
        else {
            menu = Object.assign(Object.assign({}, DEFAULT_MENU), config.menu);
        }
    }
    return {
        plugins: (_a = config === null || config === void 0 ? void 0 : config.plugins) !== null && _a !== void 0 ? _a : DEFAULT_PLUGINS,
        nodeViews: (_b = config === null || config === void 0 ? void 0 : config.nodeViews) !== null && _b !== void 0 ? _b : {},
        menu,
        schema: (_c = config === null || config === void 0 ? void 0 : config.schema) !== null && _c !== void 0 ? _c : DEFAULT_SCHEMA,
        locals: (_d = config.locals) !== null && _d !== void 0 ? _d : {}
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWRpdG9yLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4vc3JjLyIsInNvdXJjZXMiOlsibGliL2VkaXRvci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBS3JELE9BQU8sTUFBTSxNQUFNLFVBQVUsQ0FBQztBQUU5QixPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sVUFBVSxDQUFDOztBQUVsQyxNQUFNLGVBQWUsR0FBWTtJQUMvQixDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUM7SUFDbEIsQ0FBQyxNQUFNLEVBQUUsWUFBWSxDQUFDO0lBQ3RCLENBQUMsV0FBVyxFQUFFLFFBQVEsQ0FBQztJQUN2QixDQUFDLGNBQWMsRUFBRSxhQUFhLENBQUM7SUFDL0IsQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQztJQUNuRCxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUM7SUFDakIsQ0FBQyxZQUFZLEVBQUUsa0JBQWtCLENBQUM7SUFDbEMsQ0FBQyxZQUFZLEVBQUUsY0FBYyxFQUFFLGFBQWEsRUFBRSxlQUFlLENBQUM7Q0FDL0QsQ0FBQztBQUVGLE1BQU0scUJBQXFCLEdBQUc7SUFDNUIsU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztDQUNWLENBQUM7QUFFRixNQUFNLFlBQVksR0FBUztJQUN6QixPQUFPLEVBQUUsZUFBZTtJQUN4QixZQUFZLEVBQUUsRUFBRTtDQUNqQixDQUFDO0FBRUYsTUFBTSxj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LCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU2NoZW1hIH0gZnJvbSAncHJvc2VtaXJyb3ItbW9kZWwnO1xuaW1wb3J0IHsgUGx1Z2luIH0gZnJvbSAncHJvc2VtaXJyb3Itc3RhdGUnO1xuXG5pbXBvcnQgeyBNZW51LCBOZ3hFZGl0b3JDb25maWcsIE5vZGVWaWV3cywgVG9vbGJhciB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IExvY2FscyBmcm9tICcuL0xvY2Fscyc7XG5cbmltcG9ydCB7IHNjaGVtYSB9IGZyb20gJy4vc2NoZW1hJztcblxuY29uc3QgREVGQVVMVF9UT09MQkFSOiBUb29sYmFyID0gW1xuICBbJ2JvbGQnLCAnaXRhbGljJ10sXG4gIFsnY29kZScsICdibG9ja3F1b3RlJ10sXG4gIFsndW5kZXJsaW5lJywgJ3N0cmlrZSddLFxuICBbJ29yZGVyZWRfbGlzdCcsICdidWxsZXRfbGlzdCddLFxuICBbeyBoZWFkaW5nOiBbJ2gxJywgJ2gyJywgJ2gzJywgJ2g0JywgJ2g1JywgJ2g2J10gfV0sXG4gIFsnbGluaycsICdpbWFnZSddLFxuICBbJ3RleHRfY29sb3InLCAnYmFja2dyb3VuZF9jb2xvciddLFxuICBbJ2FsaWduX2xlZnQnLCAnYWxpZ25fY2VudGVyJywgJ2FsaWduX3JpZ2h0JywgJ2FsaWduX2p1c3RpZnknXSxcbl07XG5cbmNvbnN0IERFRkFVTFRfQ09MT1JfUFJFU0VUUyA9IFtcbiAgJyNiNjAyMDUnLFxuICAnI2Q5M2YwYicsXG4gICcjZmJjYTA0JyxcbiAgJyMwZThhMTYnLFxuICAnIzAwNmI3NScsXG4gICcjMWQ3NmRiJyxcbiAgJyMwMDUyY2MnLFxuICAnIzUzMTllNycsXG4gICcjZTk5Njk1JyxcbiAgJyNmOWQwYzQnLFxuICAnI2ZlZjJjMCcsXG4gICcjYzJlMGM2JyxcbiAgJyNiZmRhZGMnLFxuICAnI2M1ZGVmNScsXG4gICcjYmZkNGYyJyxcbiAgJyNkNGM1ZjknXG5dO1xuXG5jb25zdCBERUZBVUxUX01FTlU6IE1lbnUgPSB7XG4gIHRvb2xiYXI6IERFRkFVTFRfVE9PTEJBUixcbiAgY29sb3JQcmVzZXRzOiBbXVxufTtcblxuY29uc3QgREVGQVVMVF9TQ0hFTUEgPSBzY2hlbWE7XG5jb25zdCBERUZBVUxUX1BMVUdJTlM6IFBsdWdpbltdID0gW1xuXTtcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgTmd4RWRpdG9yU2VydmljZUNvbmZpZyB7XG4gIHB1YmxpYyBwbHVnaW5zOiBQbHVnaW5bXSA9IERFRkFVTFRfUExVR0lOUztcbiAgcHVibGljIG5vZGVWaWV3czogTm9kZVZpZXdzID0ge307XG4gIHB1YmxpYyBzY2hlbWE6IFNjaGVtYSA9IERFRkFVTFRfU0NIRU1BO1xuICBwdWJsaWMgbWVudSA9IERFRkFVTFRfTUVOVTtcbiAgcHVibGljIGxvY2FscyA9IHt9O1xufVxuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBOZ3hFZGl0b3JTZXJ2aWNlIHtcbiAgY29uZmlnOiBOZ3hFZGl0b3JTZXJ2aWNlQ29uZmlnO1xuXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIGNvbmZpZz86IE5neEVkaXRvclNlcnZpY2VDb25maWcpIHtcbiAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZztcbiAgfVxuXG4gIGdldCBsb2NhbHMoKTogTG9jYWxzIHtcbiAgICByZXR1cm4gbmV3IExvY2Fscyh0aGlzLmNvbmZpZy5sb2NhbHMpO1xuICB9XG5cbiAgZ2V0IG1lbnUoKTogTWVudSB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlnLm1lbnU7XG4gIH1cblxuICBnZXQgY29sb3JQcmVzZXRzKCk6IHN0cmluZ1tdW10ge1xuICAgIGNvbnN0IGNvbCA9IDg7XG4gICAgY29uc3QgY29sb3JzOiBzdHJpbmdbXVtdID0gW107XG5cbiAgICBjb25zdCB7IGNvbG9yUHJlc2V0cyB9ID0gdGhpcy5jb25maWcubWVudTtcbiAgICBjb25zdCBhbGxDb2xvcnMgPSBjb2xvclByZXNldHMubGVuZ3RoID8gY29sb3JQcmVzZXRzIDogREVGQVVMVF9DT0xPUl9QUkVTRVRTO1xuXG4gICAgYWxsQ29sb3JzLmZvckVhY2goKGNvbG9yLCBpbmRleCkgPT4ge1xuICAgICAgY29uc3Qgcm93ID0gTWF0aC5mbG9vcihpbmRleCAvIGNvbCk7XG5cbiAgICAgIGlmICghY29sb3JzW3Jvd10pIHtcbiAgICAgICAgY29sb3JzLnB1c2goW10pO1xuICAgICAgfVxuXG4gICAgICBjb2xvcnNbcm93XS5wdXNoKGNvbG9yKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBjb2xvcnM7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IHByb3ZpZGVNeVNlcnZpY2VPcHRpb25zID0gKGNvbmZpZz86IE5neEVkaXRvckNvbmZpZyk6IE5neEVkaXRvclNlcnZpY2VDb25maWcgPT4ge1xuICBsZXQgbWVudTogTWVudTtcblxuICBpZiAoY29uZmlnLm1lbnUgIT09IG51bGwpIHtcbiAgICBpZiAoIWNvbmZpZy5tZW51KSB7XG4gICAgICBtZW51ID0gREVGQVVMVF9NRU5VO1xuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShjb25maWcubWVudSkpIHtcbiAgICAgIG1lbnUgPSB7XG4gICAgICAgIC4uLkRFRkFVTFRfTUVOVSxcbiAgICAgICAgdG9vbGJhcjogY29uZmlnLm1lbnUsXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBtZW51ID0ge1xuICAgICAgICAuLi5ERUZBVUxUX01FTlUsXG4gICAgICAgIC4uLmNvbmZpZy5tZW51LFxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBsdWdpbnM6IGNvbmZpZz8ucGx1Z2lucyA/PyBERUZBVUxUX1BMVUdJTlMsXG4gICAgbm9kZVZpZXdzOiBjb25maWc/Lm5vZGVWaWV3cyA/PyB7fSxcbiAgICBtZW51LFxuICAgIHNjaGVtYTogY29uZmlnPy5zY2hlbWEgPz8gREVGQVVMVF9TQ0hFTUEsXG4gICAgbG9jYWxzOiBjb25maWcubG9jYWxzID8/IHt9XG4gIH07XG59O1xuIl19