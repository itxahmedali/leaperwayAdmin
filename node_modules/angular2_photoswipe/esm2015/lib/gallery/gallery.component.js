/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ContentChildren, QueryList, ViewChild, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import * as PhotoSwipe from 'photoswipe';
import * as PhotoSwipeUI_Default from 'photoswipe/dist/photoswipe-ui-default';
import { GalleryItemComponent } from '../gallery-item/gallery-item.component';
import { NgpService } from '../ngp.service';
import { LightboxAdapter } from '../lightbox-adapter';
export class GalleryComponent {
    /**
     * @param {?} ngp
     * @param {?} adapter
     */
    constructor(ngp, adapter) {
        this.ngp = ngp;
        this.adapter = adapter;
        this.shareLinkClick = new EventEmitter();
        this.subscriptions = [];
        this.images = [];
        this.isBootstrapEnabled = this.adapter.enableBootstrap4;
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.images = (/** @type {?} */ (this.galleryItems.toArray().map((/**
         * @param {?} cp
         * @return {?}
         */
        cp => {
            // listen for clicks;
            this.subscriptions.push(cp.clicked.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            (data) => this.onClick(data))));
            return cp.image;
        }))));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subscriptions.forEach((/**
         * @param {?} sub
         * @return {?}
         */
        sub => sub.unsubscribe()));
    }
    /**
     * @param {?} data
     * @return {?}
     */
    onClick(data) {
        this.openPhotoSwipe(data, this.galleryElement);
    }
    /**
     * @private
     * @param {?} img
     * @param {?} galleryDOM
     * @return {?}
     */
    openPhotoSwipe(img, galleryDOM) {
        this.adapter.galleryUID = galleryDOM.nativeElement.getAttribute('data-pswp-uid');
        this.adapter.index = img.id;
        /** @type {?} */
        const PSWP = (/** @type {?} */ (this.ngp.LightboxElement.nativeElement));
        this.pswp = new PhotoSwipe(PSWP, PhotoSwipeUI_Default, this.getImagesAsPhotoswipe(), this.adapter);
        /** @type {?} */
        const _this = this;
        this.pswp.listen('shareLinkClick', (/**
         * @param {?} e
         * @param {?} target
         * @return {?}
         */
        function (e, target) {
            _this.shareLinkClick.emit({ e, target });
        }));
        this.pswp.init();
        return false;
    }
    /**
     * @private
     * @return {?}
     */
    getImagesAsPhotoswipe() {
        return this.images.map((/**
         * @param {?} image
         * @return {?}
         */
        image => {
            return {
                src: image.largeUrl,
                w: image.width,
                h: image.height,
                pid: image.id,
                title: image.description,
                author: image.author
            };
        }));
    }
}
GalleryComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngp-gallery',
                template: "<div class=\"angular2_photoswipe\" [ngClass]=\"{'card-columns': isBootstrapEnabled }\"  #ngpGallery id=\"sampleId\" itemscope itemtype=\"http://schema.org/ImageGallery\">\n  <ng-content select=\"ngp-gallery-item\"></ng-content>\n</div>",
                styles: [""]
            }] }
];
/** @nocollapse */
GalleryComponent.ctorParameters = () => [
    { type: NgpService },
    { type: LightboxAdapter }
];
GalleryComponent.propDecorators = {
    galleryElement: [{ type: ViewChild, args: ['ngpGallery', { static: true },] }],
    galleryItems: [{ type: ContentChildren, args: [GalleryItemComponent,] }],
    galleryId: [{ type: Input }],
    shareLinkClick: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    GalleryComponent.prototype.galleryElement;
    /** @type {?} */
    GalleryComponent.prototype.galleryItems;
    /** @type {?} */
    GalleryComponent.prototype.galleryId;
    /** @type {?} */
    GalleryComponent.prototype.shareLinkClick;
    /** @type {?} */
    GalleryComponent.prototype.subscriptions;
    /** @type {?} */
    GalleryComponent.prototype.isBootstrapEnabled;
    /** @type {?} */
    GalleryComponent.prototype.pswp;
    /** @type {?} */
    GalleryComponent.prototype.images;
    /**
     * @type {?}
     * @private
     */
    GalleryComponent.prototype.ngp;
    /**
     * @type {?}
     * @private
     */
    GalleryComponent.prototype.adapter;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FsbGVyeS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyMl9waG90b3N3aXBlLyIsInNvdXJjZXMiOlsibGliL2dhbGxlcnkvZ2FsbGVyeS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFvQixTQUFTLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBYSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN2SixPQUFPLEtBQUssVUFBVSxNQUFNLFlBQVksQ0FBQztBQUN6QyxPQUFPLEtBQUssb0JBQW9CLE1BQU0sdUNBQXVDLENBQUM7QUFFOUUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFFOUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBSTVDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQU90RCxNQUFNLE9BQU8sZ0JBQWdCOzs7OztJQWEzQixZQUFvQixHQUFlLEVBQVUsT0FBd0I7UUFBakQsUUFBRyxHQUFILEdBQUcsQ0FBWTtRQUFVLFlBQU8sR0FBUCxPQUFPLENBQWlCO1FBUjNELG1CQUFjLEdBQW9ELElBQUksWUFBWSxFQUFFLENBQUM7UUFFL0Ysa0JBQWEsR0FBbUIsRUFBRSxDQUFDO1FBT2pDLElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDO0lBQzFELENBQUM7Ozs7SUFFRCxrQkFBa0I7UUFDaEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxtQkFBSyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUc7Ozs7UUFBQyxFQUFFLENBQUMsRUFBRTtZQUN0RCxxQkFBcUI7WUFDckIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxTQUFTOzs7O1lBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUMsQ0FBQyxDQUFDO1lBQzVFLE9BQU8sRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNsQixDQUFDLEVBQUMsRUFBQSxDQUFDO0lBQ0wsQ0FBQzs7OztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU87Ozs7UUFBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsRUFBQyxDQUFDO0lBQ3ZELENBQUM7Ozs7O0lBRUQsT0FBTyxDQUFDLElBQUk7UUFDVixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDakQsQ0FBQzs7Ozs7OztJQUVPLGNBQWMsQ0FBQyxHQUFVLEVBQUUsVUFBc0I7UUFDdkQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDakYsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDLEVBQUUsQ0FBQzs7Y0FDdEIsSUFBSSxHQUFnQixtQkFBYSxJQUFJLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxhQUFhLEVBQUE7UUFDN0UsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLFVBQVUsQ0FBQyxJQUFJLEVBQUUsb0JBQW9CLEVBQUUsSUFBSSxDQUFDLHFCQUFxQixFQUFFLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDOztjQUM3RixLQUFLLEdBQUcsSUFBSTtRQUNsQixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0I7Ozs7O1FBQUUsVUFBVSxDQUFDLEVBQUUsTUFBTTtZQUNwRCxLQUFLLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO1FBQzNDLENBQUMsRUFBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNqQixPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7Ozs7O0lBRU8scUJBQXFCO1FBQzNCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHOzs7O1FBQUMsS0FBSyxDQUFDLEVBQUU7WUFDN0IsT0FBTztnQkFDTCxHQUFHLEVBQUUsS0FBSyxDQUFDLFFBQVE7Z0JBQ25CLENBQUMsRUFBRSxLQUFLLENBQUMsS0FBSztnQkFDZCxDQUFDLEVBQUUsS0FBSyxDQUFDLE1BQU07Z0JBQ2YsR0FBRyxFQUFFLEtBQUssQ0FBQyxFQUFFO2dCQUNiLEtBQUssRUFBRSxLQUFLLENBQUMsV0FBVztnQkFDeEIsTUFBTSxFQUFFLEtBQUssQ0FBQyxNQUFNO2FBQ3JCLENBQUM7UUFDSixDQUFDLEVBQUMsQ0FBQztJQUVMLENBQUM7OztZQWhFRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGFBQWE7Z0JBQ3ZCLHVQQUF1Qzs7YUFFeEM7Ozs7WUFWUSxVQUFVO1lBSVYsZUFBZTs7OzZCQVNyQixTQUFTLFNBQUMsWUFBWSxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTsyQkFDeEMsZUFBZSxTQUFDLG9CQUFvQjt3QkFDcEMsS0FBSzs2QkFDTCxNQUFNOzs7O0lBSFAsMENBQXNGOztJQUN0Rix3Q0FBcUY7O0lBQ3JGLHFDQUEyQjs7SUFDM0IsMENBQStGOztJQUUvRix5Q0FBbUM7O0lBQ25DLDhDQUE0Qjs7SUFDNUIsZ0NBQWlCOztJQUVqQixrQ0FBZ0I7Ozs7O0lBRUosK0JBQXVCOzs7OztJQUFFLG1DQUFnQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgQ29udGVudENoaWxkcmVuLCBBZnRlckNvbnRlbnRJbml0LCBRdWVyeUxpc3QsIFZpZXdDaGlsZCwgRWxlbWVudFJlZiwgT25EZXN0cm95LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCAqIGFzIFBob3RvU3dpcGUgZnJvbSAncGhvdG9zd2lwZSc7XG5pbXBvcnQgKiBhcyBQaG90b1N3aXBlVUlfRGVmYXVsdCBmcm9tICdwaG90b3N3aXBlL2Rpc3QvcGhvdG9zd2lwZS11aS1kZWZhdWx0JztcblxuaW1wb3J0IHsgR2FsbGVyeUl0ZW1Db21wb25lbnQgfSBmcm9tICcuLi9nYWxsZXJ5LWl0ZW0vZ2FsbGVyeS1pdGVtLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBJbWFnZSB9IGZyb20gJy4uL2ltYWdlJztcbmltcG9ydCB7IE5ncFNlcnZpY2UgfSBmcm9tICcuLi9uZ3Auc2VydmljZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgTGlnaHRib3hPcHRpb25zIH0gZnJvbSAnLi4vbGlnaHRib3gtb3B0aW9ucyc7XG5pbXBvcnQgeyBMaWdodGJveEFkYXB0ZXIgfSBmcm9tICcuLi9saWdodGJveC1hZGFwdGVyJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbmdwLWdhbGxlcnknLFxuICB0ZW1wbGF0ZVVybDogJy4vZ2FsbGVyeS5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2dhbGxlcnkuY29tcG9uZW50LmNzcyddXG59KVxuZXhwb3J0IGNsYXNzIEdhbGxlcnlDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0LCBPbkRlc3Ryb3kge1xuXG4gIEBWaWV3Q2hpbGQoJ25ncEdhbGxlcnknLCB7IHN0YXRpYzogdHJ1ZSB9KSBnYWxsZXJ5RWxlbWVudDogRWxlbWVudFJlZjxIVE1MRGl2RWxlbWVudD47XG4gIEBDb250ZW50Q2hpbGRyZW4oR2FsbGVyeUl0ZW1Db21wb25lbnQpIGdhbGxlcnlJdGVtczogUXVlcnlMaXN0PEdhbGxlcnlJdGVtQ29tcG9uZW50PjtcbiAgQElucHV0KCkgZ2FsbGVyeUlkOiBzdHJpbmc7XG4gIEBPdXRwdXQoKSBzaGFyZUxpbmtDbGljazogRXZlbnRFbWl0dGVyPHsgZTogRXZlbnQsIHRhcmdldDogSFRNTEVsZW1lbnQgfT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgc3Vic2NyaXB0aW9uczogU3Vic2NyaXB0aW9uW10gPSBbXTtcbiAgaXNCb290c3RyYXBFbmFibGVkOiBib29sZWFuO1xuICBwc3dwOiBQaG90b1N3aXBlO1xuXG4gIGltYWdlczogSW1hZ2VbXTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG5ncDogTmdwU2VydmljZSwgcHJpdmF0ZSBhZGFwdGVyOiBMaWdodGJveEFkYXB0ZXIpIHtcbiAgICB0aGlzLmltYWdlcyA9IFtdO1xuICAgIHRoaXMuaXNCb290c3RyYXBFbmFibGVkID0gdGhpcy5hZGFwdGVyLmVuYWJsZUJvb3RzdHJhcDQ7XG4gIH1cblxuICBuZ0FmdGVyQ29udGVudEluaXQoKSB7XG4gICAgdGhpcy5pbWFnZXMgPSA8YW55PnRoaXMuZ2FsbGVyeUl0ZW1zLnRvQXJyYXkoKS5tYXAoY3AgPT4ge1xuICAgICAgLy8gbGlzdGVuIGZvciBjbGlja3M7XG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbnMucHVzaChjcC5jbGlja2VkLnN1YnNjcmliZSgoZGF0YSkgPT4gdGhpcy5vbkNsaWNrKGRhdGEpKSk7XG4gICAgICByZXR1cm4gY3AuaW1hZ2U7XG4gICAgfSk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMuZm9yRWFjaChzdWIgPT4gc3ViLnVuc3Vic2NyaWJlKCkpO1xuICB9XG5cbiAgb25DbGljayhkYXRhKSB7XG4gICAgdGhpcy5vcGVuUGhvdG9Td2lwZShkYXRhLCB0aGlzLmdhbGxlcnlFbGVtZW50KTtcbiAgfVxuXG4gIHByaXZhdGUgb3BlblBob3RvU3dpcGUoaW1nOiBJbWFnZSwgZ2FsbGVyeURPTTogRWxlbWVudFJlZik6IGJvb2xlYW4ge1xuICAgIHRoaXMuYWRhcHRlci5nYWxsZXJ5VUlEID0gZ2FsbGVyeURPTS5uYXRpdmVFbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1wc3dwLXVpZCcpO1xuICAgIHRoaXMuYWRhcHRlci5pbmRleCA9IGltZy5pZDtcbiAgICBjb25zdCBQU1dQOiBIVE1MRWxlbWVudCA9IDxIVE1MRWxlbWVudD50aGlzLm5ncC5MaWdodGJveEVsZW1lbnQubmF0aXZlRWxlbWVudDtcbiAgICB0aGlzLnBzd3AgPSBuZXcgUGhvdG9Td2lwZShQU1dQLCBQaG90b1N3aXBlVUlfRGVmYXVsdCwgdGhpcy5nZXRJbWFnZXNBc1Bob3Rvc3dpcGUoKSwgdGhpcy5hZGFwdGVyKTtcbiAgICBjb25zdCBfdGhpcyA9IHRoaXM7XG4gICAgdGhpcy5wc3dwLmxpc3Rlbignc2hhcmVMaW5rQ2xpY2snLCBmdW5jdGlvbiAoZSwgdGFyZ2V0KSB7XG4gICAgICBfdGhpcy5zaGFyZUxpbmtDbGljay5lbWl0KHsgZSwgdGFyZ2V0IH0pO1xuICAgIH0pO1xuICAgIHRoaXMucHN3cC5pbml0KCk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRJbWFnZXNBc1Bob3Rvc3dpcGUoKTogYW55W10ge1xuICAgIHJldHVybiB0aGlzLmltYWdlcy5tYXAoaW1hZ2UgPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3JjOiBpbWFnZS5sYXJnZVVybCxcbiAgICAgICAgdzogaW1hZ2Uud2lkdGgsXG4gICAgICAgIGg6IGltYWdlLmhlaWdodCxcbiAgICAgICAgcGlkOiBpbWFnZS5pZCxcbiAgICAgICAgdGl0bGU6IGltYWdlLmRlc2NyaXB0aW9uLFxuICAgICAgICBhdXRob3I6IGltYWdlLmF1dGhvclxuICAgICAgfTtcbiAgICB9KTtcblxuICB9XG59XG4iXX0=