/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, HostBinding } from '@angular/core';
import { Image } from '../image';
import { LightboxAdapter } from '../lightbox-adapter';
export class GalleryItemComponent {
    /**
     * @param {?} adapter
     */
    constructor(adapter) {
        this.adapter = adapter;
        this.clicked = new EventEmitter();
        this.isBootstrapEnabled = false;
        this.isBootstrapEnabled = this.adapter.enableBootstrap4;
    }
    /**
     * @return {?}
     */
    onClick() {
        this.clicked.emit(this.image);
        return false;
    }
}
GalleryItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngp-gallery-item',
                template: "<a href=\"{{image.largeUrl}}\" itemprop=\"contentUrl\" [attr.data-size]=\"image.width + 'x' + image.height\"\n    [attr.data-author]=\"image.author\" (click)=\"onClick()\">\n    <img src=\"{{image.thumbUrl}}\" [ngClass]=\"{'card-img-top': isBootstrapEnabled }\"  itemprop=\"thumbnail\" alt=\"{{image.description}}\" />\n</a>",
                styles: [""]
            }] }
];
/** @nocollapse */
GalleryItemComponent.ctorParameters = () => [
    { type: LightboxAdapter }
];
GalleryItemComponent.propDecorators = {
    image: [{ type: Input }],
    clicked: [{ type: Output }],
    isBootstrapEnabled: [{ type: HostBinding, args: ['class.card',] }]
};
if (false) {
    /** @type {?} */
    GalleryItemComponent.prototype.image;
    /** @type {?} */
    GalleryItemComponent.prototype.clicked;
    /** @type {?} */
    GalleryItemComponent.prototype.isBootstrapEnabled;
    /**
     * @type {?}
     * @private
     */
    GalleryItemComponent.prototype.adapter;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FsbGVyeS1pdGVtLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXIyX3Bob3Rvc3dpcGUvIiwic291cmNlcyI6WyJsaWIvZ2FsbGVyeS1pdGVtL2dhbGxlcnktaXRlbS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3BGLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDakMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBT3RELE1BQU0sT0FBTyxvQkFBb0I7Ozs7SUFNL0IsWUFBb0IsT0FBd0I7UUFBeEIsWUFBTyxHQUFQLE9BQU8sQ0FBaUI7UUFIbEMsWUFBTyxHQUFHLElBQUksWUFBWSxFQUFTLENBQUM7UUFDbkIsdUJBQWtCLEdBQVksS0FBSyxDQUFDO1FBRzdELElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDO0lBQzFELENBQUM7Ozs7SUFFTSxPQUFPO1FBQ1osSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzlCLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQzs7O1lBbEJGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsa0JBQWtCO2dCQUM1QixnVkFBNEM7O2FBRTdDOzs7O1lBTlEsZUFBZTs7O29CQVNyQixLQUFLO3NCQUNMLE1BQU07aUNBQ04sV0FBVyxTQUFDLFlBQVk7Ozs7SUFGekIscUNBQXNCOztJQUN0Qix1Q0FBOEM7O0lBQzlDLGtEQUErRDs7Ozs7SUFFbkQsdUNBQWdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIEhvc3RCaW5kaW5nIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJbWFnZSB9IGZyb20gJy4uL2ltYWdlJztcbmltcG9ydCB7IExpZ2h0Ym94QWRhcHRlciB9IGZyb20gJy4uL2xpZ2h0Ym94LWFkYXB0ZXInO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduZ3AtZ2FsbGVyeS1pdGVtJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2dhbGxlcnktaXRlbS5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2dhbGxlcnktaXRlbS5jb21wb25lbnQuY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgR2FsbGVyeUl0ZW1Db21wb25lbnQge1xuXG4gIEBJbnB1dCgpIGltYWdlOiBJbWFnZTtcbiAgQE91dHB1dCgpIGNsaWNrZWQgPSBuZXcgRXZlbnRFbWl0dGVyPEltYWdlPigpO1xuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmNhcmQnKSBpc0Jvb3RzdHJhcEVuYWJsZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGFkYXB0ZXI6IExpZ2h0Ym94QWRhcHRlcikge1xuICAgIHRoaXMuaXNCb290c3RyYXBFbmFibGVkID0gdGhpcy5hZGFwdGVyLmVuYWJsZUJvb3RzdHJhcDQ7XG4gIH1cblxuICBwdWJsaWMgb25DbGljaygpIHtcbiAgICB0aGlzLmNsaWNrZWQuZW1pdCh0aGlzLmltYWdlKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxufVxuIl19