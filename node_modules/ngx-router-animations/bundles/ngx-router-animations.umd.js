(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/animations')) :
    typeof define === 'function' && define.amd ? define('ngx-router-animations', ['exports', '@angular/animations'], factory) :
    (factory((global['ngx-router-animations'] = {}),global.ng.animations));
}(this, (function (exports,animations) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var sharedStyles = {
        position: 'fixed',
        overflow: 'hidden',
        backfaceVisibility: 'hidden',
        transformStyle: 'preserve-3d',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var moveFromRightKeyframes = animations.keyframes([
        animations.style({ transform: 'translateX(100%)', offset: 0, 'z-index': '9999' }),
        animations.style({ transform: 'translateX(0%)', offset: 1 })
    ]);
    /** @type {?} */
    var moveToLeftKeyframes = animations.keyframes([
        animations.style({ transform: 'translateX(0%)', offset: 0 }),
        animations.style({ transform: 'translateX(-100%)', opacity: '0', offset: 1 })
    ]);
    /** @type {?} */
    var moveFromLeftKeyframes = animations.keyframes([
        animations.style({ transform: 'translateX(-100%)', offset: 0, 'z-index': '9999' }),
        animations.style({ transform: 'translateX(0%)', offset: 1 })
    ]);
    /** @type {?} */
    var moveToRightKeyframes = animations.keyframes([
        animations.style({ transform: 'translateX(0%)', offset: 0 }),
        animations.style({ transform: 'translateX(100%)', opacity: '0', offset: 1 })
    ]);
    /** @type {?} */
    var moveFromTopKeyframes = animations.keyframes([
        animations.style({ transform: 'translateY(-100%)', offset: 0, 'z-index': '9999' }),
        animations.style({ transform: 'translateY(0%)', offset: 1 })
    ]);
    /** @type {?} */
    var moveToBottomKeyframes = animations.keyframes([
        animations.style({ transform: 'translateY(0%)', offset: 0 }),
        animations.style({ transform: 'translateY(100%)', opacity: '0', offset: 1 })
    ]);
    /** @type {?} */
    var moveFromBottomKeyframes = animations.keyframes([
        animations.style({ transform: 'translateY(100%)', offset: 0, 'z-index': '9999' }),
        animations.style({ transform: 'translateY(0%)', offset: 1 })
    ]);
    /** @type {?} */
    var moveToTopKeyframes = animations.keyframes([
        animations.style({ transform: 'translateY(0%)', offset: 0 }),
        animations.style({ transform: 'translateY(-100%)', opacity: '0', offset: 1 })
    ]);
    /** @type {?} */
    var scaleDown = animations.keyframes([
        animations.style({ opacity: '1', transform: 'scale(1)', offset: 0 }),
        animations.style({ opacity: '0', transform: 'scale(0.8)', offset: 1 })
    ]);
    /** @type {?} */
    var fadeFrames = animations.keyframes([
        animations.style({ opacity: '1', offset: 0 }),
        animations.style({ opacity: '0.3', offset: 1 })
    ]);

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** *
     * Move
      @type {?} */
    var moveFromLeft = animations.animation([
        animations.query(':enter, :leave', animations.style(sharedStyles), { optional: true }),
        animations.group([
            animations.query(':enter', [
                animations.animate('{{enterTiming}}s {{enterDelay}}s ease', moveFromLeftKeyframes)
            ], { optional: true }),
            animations.query(':leave', [
                animations.animate('{{leaveTiming}}s {{leaveDelay}}s ease', moveToRightKeyframes)
            ], { optional: true }),
        ])
    ], { params: { enterTiming: '.6', leaveTiming: '0.6', enterDelay: '0', leaveDelay: '0' } });
    /** @type {?} */
    var moveFromRight = animations.animation([
        animations.query(':enter, :leave', animations.style(sharedStyles), { optional: true }),
        animations.group([
            animations.query(':enter', [
                animations.animate('{{enterTiming}}s {{enterDelay}}s ease', moveFromRightKeyframes)
            ], { optional: true }),
            animations.query(':leave', [
                animations.animate('{{leaveTiming}}s {{leaveDelay}}s ease', moveToLeftKeyframes)
            ], { optional: true }),
        ])
    ], { params: { enterTiming: '.6', leaveTiming: '0.6', enterDelay: '0', leaveDelay: '0' } });
    /** @type {?} */
    var moveFromTop = animations.animation([
        animations.query(':enter, :leave', animations.style(sharedStyles), { optional: true }),
        animations.group([
            animations.query(':enter', [
                animations.animate('{{enterTiming}}s {{enterDelay}}s ease', moveFromTopKeyframes)
            ], { optional: true }),
            animations.query(':leave', [
                animations.animate('{{leaveTiming}}s {{leaveDelay}}s ease', moveToBottomKeyframes)
            ], { optional: true }),
        ])
    ], { params: { enterTiming: '.6', leaveTiming: '0.6', enterDelay: '0', leaveDelay: '0' } });
    /** @type {?} */
    var moveFromBottom = animations.animation([
        animations.query(':enter, :leave', animations.style(sharedStyles), { optional: true }),
        animations.group([
            animations.query(':enter', [
                animations.animate('{{enterTiming}}s {{enterDelay}}s ease', moveFromBottomKeyframes)
            ], { optional: true }),
            animations.query(':leave', [
                animations.animate('{{leaveTiming}}s {{leaveDelay}}s ease', moveToTopKeyframes)
            ], { optional: true }),
        ])
    ], { params: { enterTiming: '.6', leaveTiming: '0.6', enterDelay: '0', leaveDelay: '0' } });
    /** *
     * Fade
      @type {?} */
    var moveFromLeftFade = animations.animation([
        animations.query(':enter, :leave', animations.style(sharedStyles), { optional: true }),
        animations.group([
            animations.query(':enter', [
                animations.animate('{{enterTiming}}s {{enterDelay}}s ease', moveFromLeftKeyframes)
            ], { optional: true }),
            animations.query(':leave', [
                animations.animate('{{leaveTiming}}s {{leaveDelay}}s ease', fadeFrames)
            ], { optional: true }),
        ])
    ], { params: { enterTiming: '.6', leaveTiming: '0.7', enterDelay: '0', leaveDelay: '0' } });
    /** @type {?} */
    var moveFromRightFade = animations.animation([
        animations.query(':enter, :leave', animations.style(sharedStyles), { optional: true }),
        animations.group([
            animations.query(':enter', [
                animations.animate('{{enterTiming}}s {{enterDelay}}s ease', moveFromRightKeyframes)
            ], { optional: true }),
            animations.query(':leave', [
                animations.animate('{{leaveTiming}}s {{leaveDelay}}s ease', fadeFrames)
            ], { optional: true }),
        ])
    ], { params: { enterTiming: '.6', leaveTiming: '0.7', enterDelay: '0', leaveDelay: '0' } });
    /** @type {?} */
    var moveFromTopFade = animations.animation([
        animations.query(':enter, :leave', animations.style(sharedStyles), { optional: true }),
        animations.group([
            animations.query(':enter', [
                animations.animate('{{enterTiming}}s {{enterDelay}}s ease', moveFromTopKeyframes)
            ], { optional: true }),
            animations.query(':leave', [
                animations.animate('{{leaveTiming}}s {{leaveDelay}}s ease', fadeFrames)
            ], { optional: true }),
        ])
    ], { params: { enterTiming: '.6', leaveTiming: '0.7', enterDelay: '0', leaveDelay: '0' } });
    /** @type {?} */
    var moveFromBottomFade = animations.animation([
        animations.query(':enter, :leave', animations.style(sharedStyles), { optional: true }),
        animations.group([
            animations.query(':enter', [
                animations.animate('{{enterTiming}}s {{enterDelay}}s ease', moveFromBottomKeyframes)
            ], { optional: true }),
            animations.query(':leave', [
                animations.animate('{{leaveTiming}}s {{leaveDelay}}s ease', fadeFrames)
            ], { optional: true }),
        ])
    ], { params: { enterTiming: '.6', leaveTiming: '0.7', enterDelay: '0', leaveDelay: '0' } });
    /** *
     * Different easing
      @type {?} */
    var fromLeftEasing = animations.animation([
        animations.query(':enter, :leave', animations.style(sharedStyles), { optional: true }),
        animations.group([
            animations.query(':enter', [
                animations.style({ 'z-index': 9999 }),
                animations.animate('{{enterTiming}}s {{enterDelay}}s ease', moveFromLeftKeyframes)
            ], { optional: true }),
            animations.query(':leave', [
                animations.animate('{{leaveTiming}}s {{leaveDelay}}s ease-in-out', moveToRightKeyframes)
            ], { optional: true }),
        ])
    ], { params: { enterTiming: '.6', leaveTiming: '0.8', enterDelay: '0', leaveDelay: '0' } });
    /** @type {?} */
    var fromRightEasing = animations.animation([
        animations.query(':enter, :leave', animations.style(sharedStyles), { optional: true }),
        animations.group([
            animations.query(':enter', [
                animations.style({ 'z-index': 9999 }),
                animations.animate('{{enterTiming}}s {{enterDelay}}s ease', moveFromRightKeyframes)
            ], { optional: true }),
            animations.query(':leave', [
                animations.animate('{{leaveTiming}}s {{leaveDelay}}s ease-in-out', moveToLeftKeyframes)
            ], { optional: true }),
        ])
    ], { params: { enterTiming: '.6', leaveTiming: '0.8', enterDelay: '0', leaveDelay: '0' } });
    /** @type {?} */
    var fromTopEasing = animations.animation([
        animations.query(':enter, :leave', animations.style(sharedStyles), { optional: true }),
        animations.group([
            animations.query(':enter', [
                animations.style({ 'z-index': 9999 }),
                animations.animate('{{enterTiming}}s {{enterDelay}}s ease', moveFromTopKeyframes)
            ], { optional: true }),
            animations.query(':leave', [
                animations.animate('{{leaveTiming}}s {{leaveDelay}}s ease-in-out', moveToBottomKeyframes)
            ], { optional: true }),
        ])
    ], { params: { enterTiming: '.6', leaveTiming: '0.8', enterDelay: '0', leaveDelay: '0' } });
    /** @type {?} */
    var fromBottomEasing = animations.animation([
        animations.query(':enter, :leave', animations.style(sharedStyles), { optional: true }),
        //  query(':enter', style({'opacity': '0'})
        //     , { optional: true }),
        animations.group([
            animations.query(':enter', [
                animations.style({ 'z-index': 9999 }),
                animations.animate('{{enterTiming}}s {{enterDelay}}s ease', moveFromBottomKeyframes)
            ], { optional: true }),
            animations.query(':leave', [
                animations.animate('{{leaveTiming}}s {{leaveDelay}}s ease-in-out', moveToTopKeyframes)
            ], { optional: true }),
        ])
    ], { params: { enterTiming: '.6', leaveTiming: '0.8', enterDelay: 0, leaveDelay: '0' } });
    /** *
     * Scale
      @type {?} */
    var scaleDownFromLeft = animations.animation([
        animations.query(':enter, :leave', animations.style(sharedStyles), { optional: true }),
        animations.group([
            animations.query(':enter', [
                animations.animate('{{enterTiming}}s {{enterDelay}}s ease', moveFromLeftKeyframes)
            ], { optional: true }),
            animations.query(':leave', [
                animations.animate('{{leaveTiming}}s {{leaveDelay}}s ease', scaleDown)
            ], { optional: true }),
        ]),
    ], { params: { enterTiming: '0.6', leaveTiming: '0.7', enterDelay: '0', leaveDelay: '0' } });
    /** @type {?} */
    var scaleDownFromRight = animations.animation([
        animations.query(':enter, :leave', animations.style(sharedStyles), { optional: true }),
        animations.group([
            animations.query(':enter', [
                animations.style({ 'z-index': 999 }),
                animations.animate('{{enterTiming}}s {{enterDelay}}s ease', moveFromRightKeyframes)
            ], { optional: true }),
            animations.query(':leave', [
                animations.animate('{{leaveTiming}}s {{leaveDelay}}s ease-in', scaleDown)
            ], { optional: true }),
        ]),
    ], { params: { enterTiming: '0.6', leaveTiming: '0.7', enterDelay: '0', leaveDelay: '0' } });
    /** @type {?} */
    var scaleDownFromTop = animations.animation([
        animations.query(':enter, :leave', animations.style(sharedStyles), { optional: true }),
        animations.group([
            animations.query(':enter', [
                animations.style({ 'z-index': 999 }),
                animations.animate('{{enterTiming}}s {{enterDelay}}s ease', moveFromTopKeyframes)
            ], { optional: true }),
            animations.query(':leave', [
                animations.animate('{{leaveTiming}}s {{leaveDelay}}s ease', scaleDown)
            ], { optional: true }),
        ]),
    ], { params: { enterTiming: '0.6', leaveTiming: '0.7', enterDelay: '0', leaveDelay: '0' } });
    /** @type {?} */
    var scaleDownFromBottom = animations.animation([
        animations.query(':enter, :leave', animations.style(sharedStyles), { optional: true }),
        animations.group([
            animations.query(':enter', [
                animations.style({ 'z-index': 999 }),
                animations.animate('{{enterTiming}}s {{enterDelay}}s ease', moveFromBottomKeyframes)
            ], { optional: true }),
            animations.query(':leave', [
                animations.animate('{{leaveTiming}}s {{leaveDelay}}s ease', scaleDown)
            ], { optional: true }),
        ]),
    ], { params: { enterTiming: '0.6', leaveTiming: '0.7', enterDelay: '0', leaveDelay: '0' } });
    /** @type {?} */
    var scaleDownScaleDown = animations.animation([
        animations.query(':enter, :leave', animations.style(sharedStyles), { optional: true }),
        animations.group([
            animations.query(':enter', [
                animations.style({ 'z-index': 999 }),
                animations.animate('{{enterTiming}}s {{enterDelay}}s ease', animations.keyframes([
                    animations.style({ opacity: 0, transform: 'scale(1.2)', offset: 0 }),
                    animations.style({ opacity: 1, transform: 'scale(1)', offset: 1 })
                ]))
            ], { optional: true }),
            animations.query(':leave', [
                animations.animate('{{leaveTiming}}s {{leaveDelay}}s ease', scaleDown)
            ], { optional: true }),
        ]),
    ], { params: { enterTiming: '0.5', leaveTiming: '0.7', enterDelay: '0', leaveDelay: '0' } });
    /** *
     * Rotate animations
      @type {?} */
    var rotateCubeToLeft = animations.animation([
        animations.query(':enter, :leave', animations.style(sharedStyles), { optional: true }),
        animations.group([
            animations.query(':enter', [
                animations.style({ 'transform-origin': '0% 50%' }),
                animations.animate('{{enterTiming}}s {{enterDelay}}s ease-in', animations.keyframes([
                    animations.style({ opacity: '0.3', transform: 'translateX(100%) rotateY(90deg)', offset: 0 }),
                    animations.style({ transform: 'translateX(50%) translateZ(-200px) rotateY(45deg)', offset: 0.5 }),
                    animations.style({ opacity: '1', transform: 'translateX(0%) translateZ(00px) rotateY(0deg)', offset: 1 })
                ]))
            ], { optional: true }),
            animations.query(':leave', [
                animations.style({ opacity: '1', 'transform-origin': '100% 50%' }),
                animations.animate('{{leaveTiming}}s {{leaveDelay}}s ease-in', animations.keyframes([
                    animations.style({ transform: 'translateX(-50%) translateZ(-200px) rotateY(-45deg)', offset: 0.5 }),
                    animations.style({ opacity: '0.3', transform: 'translateX(-100%) rotateY(-90deg)', offset: 1 })
                ]))
            ], { optional: true }),
        ])
    ], { params: { enterTiming: '0.6', leaveTiming: '0.6', enterDelay: '0', leaveDelay: '0' } });
    /** @type {?} */
    var rotateCubeToRight = animations.animation([
        animations.query(':enter, :leave', animations.style(sharedStyles), { optional: true }),
        animations.group([
            animations.query(':enter', [
                animations.style({ 'transform-origin': '100% 50%' }),
                animations.animate('{{enterTiming}}s {{enterDelay}}s ease-in', animations.keyframes([
                    animations.style({ opacity: '0.3', transform: 'translateX(-100%) rotateY(-90deg)', offset: 0 }),
                    animations.style({ transform: 'translateX(-50%) translateZ(-200px) rotateY(-45deg)', offset: 0.5 }),
                    animations.style({ opacity: '1', transform: 'translateX(0%) translateZ(00px) rotateY(0deg)', offset: 1 })
                ]))
            ], { optional: true }),
            animations.query(':leave', [
                animations.style({ opacity: '1', 'transform-origin': '0% 50%' }),
                animations.animate('{{leaveTiming}}s {{leaveDelay}}s ease-in', animations.keyframes([
                    animations.style({ transform: 'translateX(50%) translateZ(-200px) rotateY(45deg)', offset: 0.5 }),
                    animations.style({ opacity: '0.3', transform: 'translateX(100%) rotateY(90deg)', offset: 1 })
                ]))
            ], { optional: true }),
        ])
    ], { params: { enterTiming: '0.6', leaveTiming: '0.6', enterDelay: '0', leaveDelay: '0' } });
    /** @type {?} */
    var rotateCubeToTop = animations.animation([
        animations.query(':enter, :leave', animations.style(sharedStyles), { optional: true }),
        animations.group([
            animations.query(':enter', [
                animations.style({ opacity: 0, 'transform-origin': '50% 0%' }),
                animations.animate('{{enterTiming}}s {{enterDelay}}s ease-in', animations.keyframes([
                    animations.style({ opacity: '0.3', transform: 'translateY(100%) rotateX(-90deg)', offset: 0 }),
                    animations.style({ transform: 'translateY(50%) translateZ(-200px) rotateX(-45deg)', offset: 0.5 }),
                    animations.style({ opacity: '1', transform: 'translateX(0%) translateZ(00px) rotateY(0deg)', offset: 1 })
                ]))
            ], { optional: true }),
            animations.query(':leave', [
                animations.style({ opacity: '1', 'transform-origin': '50% 100%' }),
                animations.animate('{{leaveTiming}}s {{leaveDelay}}s ease-in', animations.keyframes([
                    animations.style({ transform: 'translateY(-50%) translateZ(-200px) rotateX(45deg)', offset: 0.5 }),
                    animations.style({ opacity: '0.3', transform: 'translateY(-100%) rotateX(90deg)', offset: 1 })
                ]))
            ], { optional: true }),
        ])
    ], { params: { enterTiming: '0.6', leaveTiming: '0.6', enterDelay: '0', leaveDelay: '0' } });
    /** @type {?} */
    var rotateCubeToBottom = animations.animation([
        animations.query(':enter, :leave', animations.style(sharedStyles), { optional: true }),
        animations.group([
            animations.query(':enter', [
                animations.style({ opacity: 0, 'transform-origin': '50% 100%' }),
                animations.animate('{{enterTiming}}s {{enterDelay}}s ease-in', animations.keyframes([
                    animations.style({ opacity: '0.3', transform: 'translateY(-100%) rotateX(90deg)', offset: 0 }),
                    animations.style({ transform: 'translateY(-50%) translateZ(-200px) rotateX(45deg))', offset: 0.5 }),
                    animations.style({ opacity: '1', transform: 'translateX(0%) translateZ(00px) rotateY(0deg)', offset: 1 })
                ]))
            ], { optional: true }),
            animations.query(':leave', [
                animations.style({ opacity: '1', 'transform-origin': '50% 0%' }),
                animations.animate('{{leaveTiming}}s {{leaveDelay}}s ease-in', animations.keyframes([
                    animations.style({ transform: 'translateY(50%) translateZ(-200px) rotateX(-45deg)', offset: 0.5 }),
                    animations.style({ opacity: '0.3', transform: 'translateY(100%) rotateX(-90deg)', offset: 1 })
                ]))
            ], { optional: true }),
        ])
    ], { params: { enterTiming: '0.6', leaveTiming: '0.6', enterDelay: '0', leaveDelay: '0' } });
    /** @type {?} */
    var rotateNewsPaper = animations.animation([
        animations.query(':enter, :leave', animations.style(sharedStyles), { optional: true }),
        animations.group([
            animations.query(':enter', [
                animations.style({ 'transform-origin': '50% 50%', opacity: '0', 'z-index': '9999' }),
                animations.animate('{{enterTiming}}s {{enterDelay}}s ease-out', animations.keyframes([
                    animations.style({ opacity: '0', transform: 'translateZ(-3000px)', offset: 0 }),
                    animations.style({ opacity: '1', transform: 'translate3d(0,0,0)', offset: 1 })
                ]))
            ], { optional: true }),
            animations.query(':leave', [
                animations.style({ opacity: '1', 'transform-origin': '50% 50%' }),
                animations.animate('{{leaveTiming}}s {{leaveDelay}}s ease-in', animations.keyframes([
                    animations.style({ opacity: 1, transform: 'translate3d(0,0,0)', offset: 0 }),
                    animations.style({ opacity: '0', transform: 'translateZ(-3000px) rotateZ(360deg)', offset: 1 })
                ]))
            ], { optional: true }),
        ])
    ], { params: { enterTiming: '0.5', leaveTiming: '0.7', enterDelay: '0', leaveDelay: '0' } });
    /** @type {?} */
    var rotateFall = animations.animation([
        animations.query(':enter, :leave', animations.style(sharedStyles), { optional: true }),
        animations.group([
            animations.query(':enter', [
                animations.style({ opacity: 0, 'transform-origin': '50% 100%' }),
                animations.animate('{{enterTiming}}s {{enterDelay}}s ease-in', animations.keyframes([
                    animations.style({ opacity: '0', transform: 'scale(.8)', offset: 0 }),
                    animations.style({ opacity: '1', transform: 'scale(1)', offset: 1 })
                ]))
            ], { optional: true }),
            animations.query(':leave', [
                animations.animate('{{leaveTiming}}s {{leaveDelay}}s ease-in', animations.keyframes([
                    animations.style({ transform: 'rotateZ(0deg) translateY(0%)', 'transform-origin': '0% 0%', offset: 0 }),
                    animations.style({ transform: 'rotateZ(10deg)', 'animation-timing-function': 'ease-out', offset: 0.2 }),
                    animations.style({ transform: 'rotateZ(17deg)', offset: 0.4 }),
                    animations.style({ transform: 'rotateZ(16deg)', offset: 0.6 }),
                    animations.style({ transform: 'translateY(100%) rotateZ(17deg)', offset: 1 }),
                ]))
            ], { optional: true }),
        ])
    ], { params: { enterTiming: '1', enterDelay: '0', leaveDelay: '0' } });
    /** *
     * Rotate Room
      @type {?} */
    var rotateRoomToLeft = animations.animation([
        animations.query(':enter, :leave', animations.style(sharedStyles), { optional: true }),
        animations.group([
            animations.query(':enter', [
                animations.style({ 'transform-origin': '0% 50%' }),
                animations.animate('{{enterTiming}}s {{enterDelay}}s ease', animations.keyframes([
                    animations.style({ opacity: '0.3', transform: 'translateX(100%) rotateY(-90deg)', offset: 0 }),
                    animations.style({ opacity: '1', transform: 'translateX(0%) rotateY(0deg)', offset: 1 })
                ]))
            ], { optional: true }),
            animations.query(':leave', [
                animations.style({ 'transform-origin': '100% 50%' }),
                animations.animate('{{leaveTiming}}s {{leaveDelay}}s ease', animations.keyframes([
                    animations.style({ opacity: '1', transform: ' translateX(0%) rotateY(0deg)', offset: 0 }),
                    animations.style({ opacity: '0.3', transform: 'translateX(-100%) rotateY(90deg)', offset: 1 })
                ]))
            ], { optional: true }),
        ])
    ], { params: { enterTiming: '0.8', leaveTiming: '0.8', enterDelay: '0', leaveDelay: '0' } });
    /** @type {?} */
    var rotateRoomToRight = animations.animation([
        animations.query(':enter, :leave', animations.style(sharedStyles), { optional: true }),
        animations.group([
            animations.style({ 'transform-origin': '100% 50%' }),
            animations.query(':enter', [
                animations.animate('{{enterTiming}}s {{enterDelay}}s ease', animations.keyframes([
                    animations.style({ opacity: '0.3', transform: 'translateX(-100%) rotateY(90deg)', offset: 0 }),
                    animations.style({ opacity: '1', transform: 'translateX(0%) rotateY(0deg)', offset: 1 })
                ]))
            ], { optional: true }),
            animations.query(':leave', [
                animations.style({ 'transform-origin': '0% 50%' }),
                animations.animate('{{leaveTiming}}s {{leaveDelay}}s ease', animations.keyframes([
                    animations.style({ opacity: '1', transform: 'translateX(0%) rotateY(0deg)', offset: 0 }),
                    animations.style({ opacity: '0.3', transform: 'translateX(100%) rotateY(-90deg)', offset: 1 })
                ]))
            ], { optional: true }),
        ])
    ], { params: { enterTiming: '0.8', leaveTiming: '0.8', enterDelay: '0', leaveDelay: '0' } });
    /** @type {?} */
    var rotateRoomToTop = animations.animation([
        animations.query(':enter, :leave', animations.style(sharedStyles), { optional: true }),
        animations.group([
            animations.query(':enter', [
                animations.style({ 'transform-origin': '50% 0%' }),
                animations.animate('{{enterTiming}}s {{enterDelay}}s ease', animations.keyframes([
                    animations.style({ opacity: '0.3', transform: 'translateY(100%) rotateX(90deg)', offset: 0 }),
                    animations.style({ opacity: '1', transform: 'translate3d(0, 0, 0)', offset: 1 })
                ]))
            ], { optional: true }),
            animations.query(':leave', [
                animations.style({ 'transform-origin': '50% 100%' }),
                animations.animate('{{leaveTiming}}s {{leaveDelay}}s ease', animations.keyframes([
                    animations.style({ opacity: '1', transform: 'translate3d(0, 0, 0)', offset: 0 }),
                    animations.style({ opacity: '0.3', transform: 'translateY(-100%) rotateX(-90deg)', offset: 1 })
                ]))
            ], { optional: true }),
        ])
    ], { params: { enterTiming: '0.8', leaveTiming: '0.8', enterDelay: '0', leaveDelay: '0' } });
    /** @type {?} */
    var rotateRoomToBottom = animations.animation([
        animations.query(':enter, :leave', animations.style(sharedStyles), { optional: true }),
        animations.group([
            animations.query(':enter', [
                animations.animate('{{enterTiming}}s {{enterDelay}}s ease', animations.keyframes([
                    animations.style({ opacity: '0.3', 'transform-origin': '50% 100%', transform: 'translateY(-100%) rotateX(-90deg)', offset: 0 }),
                    animations.style({ opacity: '1', transform: 'translateY(0%) rotateX(0deg)', offset: 1 })
                ]))
            ], { optional: true }),
            animations.query(':leave', [
                animations.animate('{{leaveTiming}}s {{leaveDelay}}s ease', animations.keyframes([
                    animations.style({ opacity: '1', 'transform-origin': '50% 0%', transform: 'translateY(0%) rotateX(0deg)', offset: 0 }),
                    animations.style({ opacity: '0.3', transform: 'translateY(100%) rotateX(90deg)', offset: 1 })
                ]))
            ], { optional: true }),
        ])
    ], { params: { enterTiming: '0.8', leaveTiming: '0.8', enterDelay: '0', leaveDelay: '0' } });
    /** *
     * Rotate Sides
      @type {?} */
    var rotateSides = animations.animation([
        animations.query(':enter, :leave', animations.style(sharedStyles), { optional: true }),
        animations.group([
            animations.query(':enter', [
                animations.style({ 'transform-origin': '150% 50%', opacity: 0 }),
                animations.animate('{{enterTiming}}s {{enterDelay}}s ease-out', animations.keyframes([
                    animations.style({ opacity: '0', transform: 'translateZ(-500px) rotateY(-90deg)', 'z-index': '9999', offset: 0 }),
                    animations.style({ opacity: '1', transform: 'translate3d(0,0,0)', offset: 1 })
                ]))
            ], { optional: true }),
            animations.query(':leave', [
                animations.style({ 'transform-origin': '-50% 50%' }),
                animations.animate('{{leaveTiming}}s {{leaveDelay}}s ease-in', animations.keyframes([
                    animations.style({ opacity: '1', transform: 'translate3d(0,0,0)', offset: 0 }),
                    animations.style({ opacity: '0.5', transform: 'translateZ(-500px) rotateY(90deg)', offset: 1 }),
                ]))
            ], { optional: true }),
        ])
    ], { params: { enterTiming: '0.5', leaveTiming: '0.5', enterDelay: '0.2', leaveDelay: '0' } });
    /** *
     * Rotate Flip
      @type {?} */
    var rotateFlipToRight = animations.animation([
        animations.query(':enter, :leave', animations.style(sharedStyles), { optional: true }),
        animations.group([
            animations.query(':enter', [
                animations.style({ opacity: '0', 'transform-origin': '50% 50%' }),
                animations.animate('{{enterTiming}}s {{enterTiming}}s ease-out', animations.keyframes([
                    animations.style({ opacity: '0.2', transform: 'translateZ(-1000px) rotateY(-90deg)', offset: 0 }),
                    animations.style({ opacity: '1', transform: 'translateZ(0px) rotateY(0deg)', offset: 1 })
                ]))
            ], { optional: true }),
            animations.query(':leave', [
                animations.animate('{{leaveTiming}}s {{leaveDelay}}s ease-in', animations.keyframes([
                    animations.style({ opacity: '1', 'transform-origin': '50% 50%', transform: 'translateZ(0px) rotateY(0deg)', offset: 0 }),
                    animations.style({ opacity: '0.2', transform: 'translateZ(-1000px) rotateY(90deg)', offset: 1 })
                ]))
            ], { optional: true }),
        ])
    ], { params: { enterTiming: '0.5', leaveTiming: '0.5', enterDelay: '0', leaveDelay: '0' } });
    /** @type {?} */
    var rotateFlipToLeft = animations.animation([
        animations.query(':enter, :leave', animations.style(sharedStyles), { optional: true }),
        animations.group([
            animations.query(':enter', [
                animations.style({ opacity: '0', 'transform-origin': '50% 50%' }),
                animations.animate('{{enterTiming}}s {{enterTiming}}s ease-in', animations.keyframes([
                    animations.style({ opacity: '0.2', transform: 'translateZ(-1000px) rotateY(90deg)', offset: 0 }),
                    animations.style({ opacity: '1', 'transform-origin': '50% 50%', transform: 'translateZ(0px) rotateY(0deg)', offset: 1 })
                ]))
            ], { optional: true }),
            animations.query(':leave', [
                animations.animate('{{leaveTiming}}s {{leaveDelay}}s ease-out', animations.keyframes([
                    animations.style({ opacity: '1', transform: 'translateZ(0px) rotateY(0deg)', offset: 0 }),
                    animations.style({ opacity: '0.2', transform: 'translateZ(-1000px) rotateY(-90deg)', offset: 1 })
                ]))
            ], { optional: true }),
        ])
    ], { params: { enterTiming: '0.5', leaveTiming: '0.5', enterDelay: '0', leaveDelay: '0' } });
    /** @type {?} */
    var rotateFlipToTop = animations.animation([
        animations.query(':enter, :leave', animations.style(sharedStyles), { optional: true }),
        animations.group([
            animations.query(':enter', [
                animations.style({ opacity: '0', 'transform-origin': '50% 50%' }),
                animations.animate('{{enterTiming}}s {{enterDelay}}s ease-out', animations.keyframes([
                    animations.style({ opacity: '0.2', transform: 'translateZ(-1000px) rotateX(-90deg)', offset: 0 }),
                    animations.style({ opacity: '1', transform: 'translateZ(0px) rotateX(0deg)', offset: 1 })
                ]))
            ], { optional: true }),
            animations.query(':leave', [
                animations.animate('{{leaveTiming}}s {{leaveDelay}}s ease-in', animations.keyframes([
                    animations.style({ opacity: '1', 'transform-origin': '50% 50%', transform: 'translateZ(0px) rotateX(0deg)', offset: 0 }),
                    animations.style({ opacity: '0.2', transform: 'translateZ(-1000px) rotateX(90deg)', offset: 1 })
                ]))
            ], { optional: true }),
        ])
    ], { params: { enterTiming: '0.5', leaveTiming: '0.5', enterDelay: '0', leaveDelay: '0' } });
    /** @type {?} */
    var rotateFlipToBottom = animations.animation([
        animations.query(':enter, :leave', animations.style(sharedStyles), { optional: true }),
        animations.group([
            animations.query(':enter', [
                animations.style({ opacity: '0', 'transform-origin': '50% 50%' }),
                animations.animate('{{enterTiming}}s {{enterDelay}}s ease-out', animations.keyframes([
                    animations.style({ opacity: '0.2', transform: 'translateZ(-1000px) rotateX(-90deg)', offset: 0 }),
                    animations.style({ opacity: '1', transform: 'translateZ(0px) rotateX(0deg)', offset: 1 })
                ]))
            ], { optional: true }),
            animations.query(':leave', [
                animations.animate('{{leaveTiming}}s {{leaveDelay}}s ease-in', animations.keyframes([
                    animations.style({ opacity: '1', 'transform-origin': '50% 50%', transform: 'translateZ(0px) rotateX(0deg)', offset: 0 }),
                    animations.style({ opacity: '0.2', transform: 'translateZ(-1000px) rotateX(-90deg)', offset: 1 })
                ]))
            ], { optional: true }),
        ])
    ], { params: { enterTiming: '0.5', leaveTiming: '0.5', enterDelay: '0', leaveDelay: '0' } });
    /** *
     * Rotate Glue
      @type {?} */
    var rotateGlueFromRight = animations.animation([
        animations.query(':enter, :leave', animations.style(sharedStyles), { optional: true }),
        animations.group([
            animations.query(':enter', [
                animations.style({ 'transform-origin': '50% 50%' }),
                animations.animate('{{enterTiming}}s {{enterDelay}}s ease-out', moveFromRightKeyframes)
            ], { optional: true }),
            animations.query(':leave', [
                animations.style({ 'transform-origin': '0% 50%' }),
                animations.animate('{{leaveTiming}}s {{leaveDelay}}s ease-in', animations.keyframes([
                    animations.style({ opacity: '1', offset: 0 }),
                    animations.style({ opacity: '0.8', 'transform': 'rotateY(15deg)', 'animation-timing-function': 'ease-out', offset: 0.4 }),
                    animations.style({ opacity: '0', transform: 'scale(0.8) translateZ(-200px)', offset: 1 })
                ]))
            ], { optional: true }),
        ])
    ], { params: { enterTiming: '0.6', leaveTiming: '0.8', enterDelay: '0.2', leaveDelay: '0' } });
    /** @type {?} */
    var rotateGlueFromLeft = animations.animation([
        animations.query(':enter, :leave', animations.style(sharedStyles), { optional: true }),
        animations.group([
            animations.query(':enter', [
                animations.style({ 'transform-origin': '50% 50%' }),
                animations.animate('{{enterTiming}}s {{enterDelay}}s ease-out', moveFromLeftKeyframes)
            ], { optional: true }),
            animations.query(':leave', [
                animations.style({ 'transform-origin': '100% 50%' }),
                animations.animate('{{leaveTiming}}s {{leaveDelay}}s ease-in', animations.keyframes([
                    animations.style({ opacity: '1', offset: 0 }),
                    animations.style({ opacity: '0.8', 'transform': 'rotateY(-15deg)', 'animation-timing-function': 'ease-out', offset: 0.4 }),
                    animations.style({ opacity: '0', transform: 'scale(0.8) translateZ(-200px)', offset: 1 })
                ]))
            ], { optional: true }),
        ])
    ], { params: { enterTiming: '0.6', leaveTiming: '0.8', enterDelay: '0.2', leaveDelay: '0' } });
    /** @type {?} */
    var rotateGlueFromBottom = animations.animation([
        animations.query(':enter, :leave', animations.style(sharedStyles), { optional: true }),
        animations.group([
            animations.query(':enter', [
                animations.style({ 'transform-origin': '50% 50%' }),
                animations.animate('{{enterTiming}}s {{enterDelay}}s ease-out', moveFromBottomKeyframes)
            ], { optional: true }),
            animations.query(':leave', [
                animations.style({ 'transform-origin': '50% 0%' }),
                animations.animate('{{leaveTiming}}s {{leaveDelay}}s ease-in', animations.keyframes([
                    animations.style({ opacity: '1', offset: 0 }),
                    animations.style({ opacity: '0.8', 'transform': 'rotateX(-15deg)', 'animation-timing-function': 'ease-out', offset: 0.4 }),
                    animations.style({ opacity: '0', transform: 'scale(0.8) translateZ(-200px)', offset: 1 })
                ]))
            ], { optional: true }),
        ])
    ], { params: { enterTiming: '0.6', leaveTiming: '0.8', enterDelay: '0.2', leaveDelay: '0' } });
    /** @type {?} */
    var rotateGlueFromTop = animations.animation([
        animations.query(':enter, :leave', animations.style(sharedStyles), { optional: true }),
        animations.group([
            animations.query(':enter', [
                animations.style({ 'transform-origin': '50% 50%' }),
                animations.animate('{{enterTiming}}s {{enterDelay}}s ease-out', moveFromTopKeyframes)
            ], { optional: true }),
            animations.query(':leave', [
                animations.style({ 'transform-origin': '50% 100%' }),
                animations.animate('{{leaveTiming}}s {{leaveDelay}}s ease-in', animations.keyframes([
                    animations.style({ opacity: '1', offset: 0 }),
                    animations.style({ opacity: '0.8', 'transform': 'rotateX(15deg)', 'animation-timing-function': 'ease-out', offset: 0.4 }),
                    animations.style({ opacity: '0', transform: 'scale(0.8) translateZ(-200px)', offset: 1 })
                ]))
            ], { optional: true }),
        ])
    ], { params: { enterTiming: '0.6', leaveTiming: '0.8', enterDelay: '0.2', leaveDelay: '0' } });
    /** @type {?} */
    var rotateCarouselToLeft = animations.animation([
        animations.query(':enter, :leave', animations.style(sharedStyles), { optional: true }),
        animations.group([
            animations.query(':enter', [
                animations.style({ 'transform-origin': '0% 50%' }),
                animations.animate('{{enterTiming}}s {{enterDelay}}s ease', animations.keyframes([
                    animations.style({ opacity: '0.3', transform: 'translateX(200%) scale(.4) rotateY(65deg)', offset: 0 }),
                    animations.style({ opacity: '1', transform: 'translate3d(0,0,0)', offset: 1 })
                ]))
            ], { optional: true }),
            animations.query(':leave', [
                animations.style({ 'transform-origin': '100% 50%' }),
                animations.animate('{{leaveTiming}}s {{leaveDelay}}s ease', animations.keyframes([
                    animations.style({ opacity: '1', transform: 'translate3d(0, 0, 0)', offset: 0 }),
                    animations.style({ opacity: '.3', transform: 'translateX(-150%) scale(.4) rotateY(-65deg)', offset: 1 }),
                ]))
            ], { optional: true }),
        ])
    ], { params: { enterTiming: '0.8', leaveTiming: '0.8', enterDelay: '0', leaveDelay: '0' } });
    /** @type {?} */
    var rotateCarouselToRight = animations.animation([
        animations.query(':enter, :leave', animations.style(sharedStyles), { optional: true }),
        animations.group([
            animations.query(':enter', [
                animations.style({ 'transform-origin': '100% 50%' }),
                animations.animate('{{enterTiming}}s {{enterDelay}}s ease', animations.keyframes([
                    animations.style({ opacity: '0.3', transform: 'translateX(-200%) scale(.4) rotateY(-65deg)', offset: 0 }),
                    animations.style({ opacity: '1', transform: 'translate3d(0,0,0)', offset: 1 })
                ]))
            ], { optional: true }),
            animations.query(':leave', [
                animations.style({ 'transform-origin': '0% 50%' }),
                animations.animate('{{leaveTiming}}s {{leaveDelay}}s ease', animations.keyframes([
                    animations.style({ opacity: '1', transform: 'translate3d(0, 0, 0)', offset: 0 }),
                    animations.style({ opacity: '.3', transform: 'translateX(200%) scale(.4) rotateY(65deg)', offset: 1 }),
                ]))
            ], { optional: true }),
        ])
    ], { params: { enterTiming: '0.8', leaveTiming: '0.8', enterDelay: '0', leaveDelay: '0' } });
    /** @type {?} */
    var rotateCarouselToTop = animations.animation([
        animations.query(':enter, :leave', animations.style(sharedStyles), { optional: true }),
        animations.group([
            animations.query(':enter', [
                animations.style({ 'transform-origin': '50% 0%' }),
                animations.animate('{{enterTiming}}s {{enterDelay}}s ease', animations.keyframes([
                    animations.style({ opacity: '0.3', transform: 'translateY(200%) scale(.4) rotateX(-65deg)', offset: 0 }),
                    animations.style({ opacity: '1', transform: 'translate3d(0,0,0)', offset: 1 })
                ]))
            ], { optional: true }),
            animations.query(':leave', [
                animations.style({ 'transform-origin': '50% 100%' }),
                animations.animate('{{leaveTiming}}s {{leaveDelay}}s ease', animations.keyframes([
                    animations.style({ opacity: '1', transform: 'translate3d(0, 0, 0)', offset: 0 }),
                    animations.style({ opacity: '.3', transform: 'translateY(-200%) scale(.4) rotateX(65deg)', offset: 1 }),
                ]))
            ], { optional: true }),
        ])
    ], { params: { enterTiming: '0.8', leaveTiming: '0.8', enterDelay: '0', leaveDelay: '0' } });
    /** @type {?} */
    var rotateCarouselToBottom = animations.animation([
        animations.query(':enter, :leave', animations.style(sharedStyles), { optional: true }),
        animations.group([
            animations.query(':enter', [
                animations.style({ 'transform-origin': '50% 100%' }),
                animations.animate('{{enterTiming}}s {{enterDelay}}s ease', animations.keyframes([
                    animations.style({ opacity: '0.3', transform: 'translateY(-200%) scale(.4) rotateX(65deg)', offset: 0 }),
                    animations.style({ opacity: '1', transform: 'translate3d(0,0,0)', offset: 1 })
                ]))
            ], { optional: true }),
            animations.query(':leave', [
                animations.style({ 'transform-origin': '50% 0%' }),
                animations.animate('{{leaveTiming}}s {{leaveDelay}}s ease', animations.keyframes([
                    animations.style({ opacity: '1', transform: 'translate3d(0, 0, 0)', offset: 0 }),
                    animations.style({ opacity: '.3', transform: 'translateY(200%) scale(.4) rotateX(-65deg)', offset: 1 }),
                ]))
            ], { optional: true }),
        ])
    ], { params: { enterTiming: '0.8', leaveTiming: '0.8', enterDelay: '0', leaveDelay: '0' } });
    /** *
     * Slide
      @type {?} */
    var slide = animations.animation([
        animations.query(':enter, :leave', animations.style(sharedStyles), { optional: true }),
        animations.group([
            animations.query(':enter', [
                animations.style({ opacity: '0' }),
                animations.animate('{{enterTiming}}s {{enterDelay}}s ease-out', animations.keyframes([
                    animations.style({ opacity: '0.5', transform: 'translateZ(-500px) translateX(200%)', offset: 0 }),
                    animations.style({ opacity: '0.5', transform: 'translateZ(-500px)', offset: 0.75 }),
                    animations.style({ opacity: '1', transform: 'translateZ(0) translateX(0)', offset: 1 }),
                ]))
            ], { optional: true }),
            animations.query(':leave', [
                animations.animate('{{leaveTiming}}s {{leaveDelay}}s ease-out', animations.keyframes([
                    animations.style({ opacity: '1', offset: 0 }),
                    animations.style({ opacity: '0.5', transform: 'translateZ(-500px)', offset: 0.25 }),
                    animations.style({ opacity: '0.5', transform: 'translateZ(-500px) translateX(-200%)', offset: 0.75 }),
                    animations.style({ opacity: '0', transform: 'translateZ(-500px) translateX(-200%)', offset: 1 }),
                ]))
            ], { optional: true }),
        ])
    ], { params: { enterTiming: '1', leaveTiming: '1', enterDelay: '0', leaveDelay: '0' } });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.moveFromLeft = moveFromLeft;
    exports.moveFromRight = moveFromRight;
    exports.moveFromTop = moveFromTop;
    exports.moveFromBottom = moveFromBottom;
    exports.moveFromLeftFade = moveFromLeftFade;
    exports.moveFromRightFade = moveFromRightFade;
    exports.moveFromTopFade = moveFromTopFade;
    exports.moveFromBottomFade = moveFromBottomFade;
    exports.fromLeftEasing = fromLeftEasing;
    exports.fromRightEasing = fromRightEasing;
    exports.fromTopEasing = fromTopEasing;
    exports.fromBottomEasing = fromBottomEasing;
    exports.scaleDownFromLeft = scaleDownFromLeft;
    exports.scaleDownFromRight = scaleDownFromRight;
    exports.scaleDownFromTop = scaleDownFromTop;
    exports.scaleDownFromBottom = scaleDownFromBottom;
    exports.scaleDownScaleDown = scaleDownScaleDown;
    exports.rotateCubeToLeft = rotateCubeToLeft;
    exports.rotateCubeToRight = rotateCubeToRight;
    exports.rotateCubeToTop = rotateCubeToTop;
    exports.rotateCubeToBottom = rotateCubeToBottom;
    exports.rotateNewsPaper = rotateNewsPaper;
    exports.rotateFall = rotateFall;
    exports.rotateRoomToLeft = rotateRoomToLeft;
    exports.rotateRoomToRight = rotateRoomToRight;
    exports.rotateRoomToTop = rotateRoomToTop;
    exports.rotateRoomToBottom = rotateRoomToBottom;
    exports.rotateSides = rotateSides;
    exports.rotateFlipToRight = rotateFlipToRight;
    exports.rotateFlipToLeft = rotateFlipToLeft;
    exports.rotateFlipToTop = rotateFlipToTop;
    exports.rotateFlipToBottom = rotateFlipToBottom;
    exports.rotateGlueFromRight = rotateGlueFromRight;
    exports.rotateGlueFromLeft = rotateGlueFromLeft;
    exports.rotateGlueFromBottom = rotateGlueFromBottom;
    exports.rotateGlueFromTop = rotateGlueFromTop;
    exports.rotateCarouselToLeft = rotateCarouselToLeft;
    exports.rotateCarouselToRight = rotateCarouselToRight;
    exports.rotateCarouselToTop = rotateCarouselToTop;
    exports.rotateCarouselToBottom = rotateCarouselToBottom;
    exports.slide = slide;
    exports.ɵk = fadeFrames;
    exports.ɵh = moveFromBottomKeyframes;
    exports.ɵd = moveFromLeftKeyframes;
    exports.ɵb = moveFromRightKeyframes;
    exports.ɵf = moveFromTopKeyframes;
    exports.ɵg = moveToBottomKeyframes;
    exports.ɵc = moveToLeftKeyframes;
    exports.ɵe = moveToRightKeyframes;
    exports.ɵi = moveToTopKeyframes;
    exports.ɵj = scaleDown;
    exports.ɵa = sharedStyles;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ngx-router-animations.umd.js.map